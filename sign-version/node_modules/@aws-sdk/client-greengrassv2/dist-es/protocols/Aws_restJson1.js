import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectBoolean as __expectBoolean, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, isSerializableHeaderValue, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, strictParseInt32 as __strictParseInt32, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { GreengrassV2ServiceException as __BaseException } from "../models/GreengrassV2ServiceException";
import { AccessDeniedException, ConflictException, InternalServerException, RequestAlreadyInProgressException, ResourceNotFoundException, ServiceQuotaExceededException, ThrottlingException, ValidationException, } from "../models/models_0";
export const se_AssociateServiceRoleToAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/servicerole");
    let body;
    body = JSON.stringify(take(input, {
        RoleArn: [, , `roleArn`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_BatchAssociateClientDeviceWithCoreDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/v2/coreDevices/{coreDeviceThingName}/associateClientDevices");
    b.p("coreDeviceThingName", () => input.coreDeviceThingName, "{coreDeviceThingName}", false);
    let body;
    body = JSON.stringify(take(input, {
        entries: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_BatchDisassociateClientDeviceFromCoreDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/v2/coreDevices/{coreDeviceThingName}/disassociateClientDevices");
    b.p("coreDeviceThingName", () => input.coreDeviceThingName, "{coreDeviceThingName}", false);
    let body;
    body = JSON.stringify(take(input, {
        entries: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/deployments/{deploymentId}/cancel");
    b.p("deploymentId", () => input.deploymentId, "{deploymentId}", false);
    let body;
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateComponentVersionCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/v2/createComponentVersion");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        inlineRecipe: (_) => context.base64Encoder(_),
        lambdaFunction: (_) => _json(_),
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/v2/deployments");
    let body;
    body = JSON.stringify(take(input, {
        clientToken: [true, (_) => _ ?? generateIdempotencyToken()],
        components: (_) => se_ComponentDeploymentSpecifications(_, context),
        deploymentName: [],
        deploymentPolicies: (_) => _json(_),
        iotJobConfiguration: (_) => se_DeploymentIoTJobConfiguration(_, context),
        parentTargetArn: [],
        tags: (_) => _json(_),
        targetArn: [],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/components/{arn}");
    b.p("arn", () => input.arn, "{arn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteCoreDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/coreDevices/{coreDeviceThingName}");
    b.p("coreDeviceThingName", () => input.coreDeviceThingName, "{coreDeviceThingName}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/deployments/{deploymentId}");
    b.p("deploymentId", () => input.deploymentId, "{deploymentId}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/components/{arn}/metadata");
    b.p("arn", () => input.arn, "{arn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_DisassociateServiceRoleFromAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/servicerole");
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetComponentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/components/{arn}");
    b.p("arn", () => input.arn, "{arn}", false);
    const query = map({
        [_rOF]: [, input[_rOF]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetComponentVersionArtifactCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = map({}, isSerializableHeaderValue, {
        [_xaiet]: input[_iET],
    });
    b.bp("/greengrass/v2/components/{arn}/artifacts/{artifactName+}");
    b.p("arn", () => input.arn, "{arn}", false);
    b.p("artifactName", () => input.artifactName, "{artifactName+}", true);
    const query = map({
        [_sET]: [, input[_sET]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_GetConnectivityInfoCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/things/{thingName}/connectivityInfo");
    b.p("thingName", () => input.thingName, "{thingName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetCoreDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/coreDevices/{coreDeviceThingName}");
    b.p("coreDeviceThingName", () => input.coreDeviceThingName, "{coreDeviceThingName}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetDeploymentCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/deployments/{deploymentId}");
    b.p("deploymentId", () => input.deploymentId, "{deploymentId}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetServiceRoleForAccountCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/servicerole");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListClientDevicesAssociatedWithCoreDeviceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/coreDevices/{coreDeviceThingName}/associatedClientDevices");
    b.p("coreDeviceThingName", () => input.coreDeviceThingName, "{coreDeviceThingName}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/components");
    const query = map({
        [_s]: [, input[_s]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListComponentVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/components/{arn}/versions");
    b.p("arn", () => input.arn, "{arn}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListCoreDevicesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/coreDevices");
    const query = map({
        [_tGA]: [, input[_tGA]],
        [_st]: [, input[_st]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_r]: [, input[_r]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListDeploymentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/deployments");
    const query = map({
        [_tA]: [, input[_tA]],
        [_hF]: [, input[_hF]],
        [_pTA]: [, input[_pTA]],
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListEffectiveDeploymentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/coreDevices/{coreDeviceThingName}/effectiveDeployments");
    b.p("coreDeviceThingName", () => input.coreDeviceThingName, "{coreDeviceThingName}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListInstalledComponentsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/greengrass/v2/coreDevices/{coreDeviceThingName}/installedComponents");
    b.p("coreDeviceThingName", () => input.coreDeviceThingName, "{coreDeviceThingName}", false);
    const query = map({
        [_mR]: [() => input.maxResults !== void 0, () => input[_mR].toString()],
        [_nT]: [, input[_nT]],
        [_tF]: [, input[_tF]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ResolveComponentCandidatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/v2/resolveComponentCandidates");
    let body;
    body = JSON.stringify(take(input, {
        componentCandidates: (_) => _json(_),
        platform: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tags: (_) => _json(_),
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/tags/{resourceArn}");
    b.p("resourceArn", () => input.resourceArn, "{resourceArn}", false);
    const query = map({
        [_tK]: [__expectNonNull(input.tagKeys, `tagKeys`) != null, () => input[_tK] || []],
    });
    let body;
    b.m("DELETE").h(headers).q(query).b(body);
    return b.build();
};
export const se_UpdateConnectivityInfoCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/greengrass/things/{thingName}/connectivityInfo");
    b.p("thingName", () => input.thingName, "{thingName}", false);
    let body;
    body = JSON.stringify(take(input, {
        ConnectivityInfo: [, (_) => se_connectivityInfoList(_, context), `connectivityInfo`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AssociateServiceRoleToAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        associatedAt: [, __expectString, `AssociatedAt`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchAssociateClientDeviceWithCoreDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errorEntries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_BatchDisassociateClientDeviceFromCoreDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        errorEntries: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CancelDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateComponentVersionCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        componentName: __expectString,
        componentVersion: __expectString,
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        status: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        deploymentId: __expectString,
        iotJobArn: __expectString,
        iotJobId: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteComponentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteCoreDeviceCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 204 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        arn: __expectString,
        componentName: __expectString,
        componentVersion: __expectString,
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        platforms: _json,
        publisher: __expectString,
        status: _json,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateServiceRoleFromAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        disassociatedAt: [, __expectString, `DisassociatedAt`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetComponentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        recipe: context.base64Decoder,
        recipeOutputFormat: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetComponentVersionArtifactCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        preSignedUrl: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetConnectivityInfoCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        connectivityInfo: [, (_) => de_connectivityInfoList(_, context), `ConnectivityInfo`],
        message: [, __expectString, `Message`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetCoreDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        architecture: __expectString,
        coreDeviceThingName: __expectString,
        coreVersion: __expectString,
        lastStatusUpdateTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        platform: __expectString,
        runtime: __expectString,
        status: __expectString,
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetDeploymentCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        components: (_) => de_ComponentDeploymentSpecifications(_, context),
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentId: __expectString,
        deploymentName: __expectString,
        deploymentPolicies: _json,
        deploymentStatus: __expectString,
        iotJobArn: __expectString,
        iotJobConfiguration: (_) => de_DeploymentIoTJobConfiguration(_, context),
        iotJobId: __expectString,
        isLatestForTarget: __expectBoolean,
        parentTargetArn: __expectString,
        revisionId: __expectString,
        tags: _json,
        targetArn: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetServiceRoleForAccountCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        associatedAt: [, __expectString, `AssociatedAt`],
        roleArn: [, __expectString, `RoleArn`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListClientDevicesAssociatedWithCoreDeviceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        associatedClientDevices: (_) => de_AssociatedClientDeviceList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        components: (_) => de_ComponentList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListComponentVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        componentVersions: _json,
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListCoreDevicesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        coreDevices: (_) => de_CoreDevicesList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        deployments: (_) => de_DeploymentList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListEffectiveDeploymentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        effectiveDeployments: (_) => de_EffectiveDeploymentsList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListInstalledComponentsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        installedComponents: (_) => de_InstalledComponentList(_, context),
        nextToken: __expectString,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        tags: _json,
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ResolveComponentCandidatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        resolvedComponentVersions: (_) => de_ResolvedComponentVersionsList(_, context),
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateConnectivityInfoCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        message: [, __expectString, `Message`],
        version: [, __expectString, `Version`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.greengrassv2#InternalServerException":
            throw await de_InternalServerExceptionRes(parsedOutput, context);
        case "ValidationException":
        case "com.amazonaws.greengrassv2#ValidationException":
            throw await de_ValidationExceptionRes(parsedOutput, context);
        case "AccessDeniedException":
        case "com.amazonaws.greengrassv2#AccessDeniedException":
            throw await de_AccessDeniedExceptionRes(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.greengrassv2#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput, context);
        case "ThrottlingException":
        case "com.amazonaws.greengrassv2#ThrottlingException":
            throw await de_ThrottlingExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.greengrassv2#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "RequestAlreadyInProgressException":
        case "com.amazonaws.greengrassv2#RequestAlreadyInProgressException":
            throw await de_RequestAlreadyInProgressExceptionRes(parsedOutput, context);
        case "ServiceQuotaExceededException":
        case "com.amazonaws.greengrassv2#ServiceQuotaExceededException":
            throw await de_ServiceQuotaExceededExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_AccessDeniedExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_RequestAlreadyInProgressExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new RequestAlreadyInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ServiceQuotaExceededExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        resourceId: __expectString,
        resourceType: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ServiceQuotaExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ThrottlingExceptionRes = async (parsedOutput, context) => {
    const contents = map({
        [_rAS]: [() => void 0 !== parsedOutput.headers[_ra], () => __strictParseInt32(parsedOutput.headers[_ra])],
    });
    const data = parsedOutput.body;
    const doc = take(data, {
        message: __expectString,
        quotaCode: __expectString,
        serviceCode: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ThrottlingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ValidationExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        fields: _json,
        message: __expectString,
        reason: __expectString,
    });
    Object.assign(contents, doc);
    const exception = new ValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se_ComponentDeploymentSpecification = (input, context) => {
    return take(input, {
        componentVersion: [],
        configurationUpdate: _json,
        runWith: (_) => se_ComponentRunWith(_, context),
    });
};
const se_ComponentDeploymentSpecifications = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_ComponentDeploymentSpecification(value, context);
        return acc;
    }, {});
};
const se_ComponentRunWith = (input, context) => {
    return take(input, {
        posixUser: [],
        systemResourceLimits: (_) => se_SystemResourceLimits(_, context),
        windowsUser: [],
    });
};
const se_ConnectivityInfo = (input, context) => {
    return take(input, {
        HostAddress: [, , `hostAddress`],
        Id: [, , `id`],
        Metadata: [, , `metadata`],
        PortNumber: [, , `portNumber`],
    });
};
const se_connectivityInfoList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ConnectivityInfo(entry, context);
    });
};
const se_DeploymentIoTJobConfiguration = (input, context) => {
    return take(input, {
        abortConfig: (_) => se_IoTJobAbortConfig(_, context),
        jobExecutionsRolloutConfig: (_) => se_IoTJobExecutionsRolloutConfig(_, context),
        timeoutConfig: _json,
    });
};
const se_IoTJobAbortConfig = (input, context) => {
    return take(input, {
        criteriaList: (_) => se_IoTJobAbortCriteriaList(_, context),
    });
};
const se_IoTJobAbortCriteria = (input, context) => {
    return take(input, {
        action: [],
        failureType: [],
        minNumberOfExecutedThings: [],
        thresholdPercentage: __serializeFloat,
    });
};
const se_IoTJobAbortCriteriaList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_IoTJobAbortCriteria(entry, context);
    });
};
const se_IoTJobExecutionsRolloutConfig = (input, context) => {
    return take(input, {
        exponentialRate: (_) => se_IoTJobExponentialRolloutRate(_, context),
        maximumPerMinute: [],
    });
};
const se_IoTJobExponentialRolloutRate = (input, context) => {
    return take(input, {
        baseRatePerMinute: [],
        incrementFactor: __serializeFloat,
        rateIncreaseCriteria: _json,
    });
};
const se_SystemResourceLimits = (input, context) => {
    return take(input, {
        cpus: __serializeFloat,
        memory: [],
    });
};
const de_AssociatedClientDevice = (output, context) => {
    return take(output, {
        associationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        thingName: __expectString,
    });
};
const de_AssociatedClientDeviceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociatedClientDevice(entry, context);
    });
    return retVal;
};
const de_Component = (output, context) => {
    return take(output, {
        arn: __expectString,
        componentName: __expectString,
        latestVersion: (_) => de_ComponentLatestVersion(_, context),
    });
};
const de_ComponentDeploymentSpecification = (output, context) => {
    return take(output, {
        componentVersion: __expectString,
        configurationUpdate: _json,
        runWith: (_) => de_ComponentRunWith(_, context),
    });
};
const de_ComponentDeploymentSpecifications = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_ComponentDeploymentSpecification(value, context);
        return acc;
    }, {});
};
const de_ComponentLatestVersion = (output, context) => {
    return take(output, {
        arn: __expectString,
        componentVersion: __expectString,
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        description: __expectString,
        platforms: _json,
        publisher: __expectString,
    });
};
const de_ComponentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Component(entry, context);
    });
    return retVal;
};
const de_ComponentRunWith = (output, context) => {
    return take(output, {
        posixUser: __expectString,
        systemResourceLimits: (_) => de_SystemResourceLimits(_, context),
        windowsUser: __expectString,
    });
};
const de_ConnectivityInfo = (output, context) => {
    return take(output, {
        hostAddress: [, __expectString, `HostAddress`],
        id: [, __expectString, `Id`],
        metadata: [, __expectString, `Metadata`],
        portNumber: [, __expectInt32, `PortNumber`],
    });
};
const de_connectivityInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectivityInfo(entry, context);
    });
    return retVal;
};
const de_CoreDevice = (output, context) => {
    return take(output, {
        architecture: __expectString,
        coreDeviceThingName: __expectString,
        lastStatusUpdateTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        platform: __expectString,
        runtime: __expectString,
        status: __expectString,
    });
};
const de_CoreDevicesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoreDevice(entry, context);
    });
    return retVal;
};
const de_Deployment = (output, context) => {
    return take(output, {
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentId: __expectString,
        deploymentName: __expectString,
        deploymentStatus: __expectString,
        isLatestForTarget: __expectBoolean,
        parentTargetArn: __expectString,
        revisionId: __expectString,
        targetArn: __expectString,
    });
};
const de_DeploymentIoTJobConfiguration = (output, context) => {
    return take(output, {
        abortConfig: (_) => de_IoTJobAbortConfig(_, context),
        jobExecutionsRolloutConfig: (_) => de_IoTJobExecutionsRolloutConfig(_, context),
        timeoutConfig: _json,
    });
};
const de_DeploymentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Deployment(entry, context);
    });
    return retVal;
};
const de_EffectiveDeployment = (output, context) => {
    return take(output, {
        coreDeviceExecutionStatus: __expectString,
        creationTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        deploymentId: __expectString,
        deploymentName: __expectString,
        description: __expectString,
        iotJobArn: __expectString,
        iotJobId: __expectString,
        modifiedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        reason: __expectString,
        statusDetails: _json,
        targetArn: __expectString,
    });
};
const de_EffectiveDeploymentsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EffectiveDeployment(entry, context);
    });
    return retVal;
};
const de_InstalledComponent = (output, context) => {
    return take(output, {
        componentName: __expectString,
        componentVersion: __expectString,
        isRoot: __expectBoolean,
        lastInstallationSource: __expectString,
        lastReportedTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lastStatusChangeTimestamp: (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))),
        lifecycleState: __expectString,
        lifecycleStateDetails: __expectString,
        lifecycleStatusCodes: _json,
    });
};
const de_InstalledComponentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstalledComponent(entry, context);
    });
    return retVal;
};
const de_IoTJobAbortConfig = (output, context) => {
    return take(output, {
        criteriaList: (_) => de_IoTJobAbortCriteriaList(_, context),
    });
};
const de_IoTJobAbortCriteria = (output, context) => {
    return take(output, {
        action: __expectString,
        failureType: __expectString,
        minNumberOfExecutedThings: __expectInt32,
        thresholdPercentage: __limitedParseDouble,
    });
};
const de_IoTJobAbortCriteriaList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IoTJobAbortCriteria(entry, context);
    });
    return retVal;
};
const de_IoTJobExecutionsRolloutConfig = (output, context) => {
    return take(output, {
        exponentialRate: (_) => de_IoTJobExponentialRolloutRate(_, context),
        maximumPerMinute: __expectInt32,
    });
};
const de_IoTJobExponentialRolloutRate = (output, context) => {
    return take(output, {
        baseRatePerMinute: __expectInt32,
        incrementFactor: __limitedParseDouble,
        rateIncreaseCriteria: _json,
    });
};
const de_ResolvedComponentVersion = (output, context) => {
    return take(output, {
        arn: __expectString,
        componentName: __expectString,
        componentVersion: __expectString,
        message: __expectString,
        recipe: context.base64Decoder,
        vendorGuidance: __expectString,
    });
};
const de_ResolvedComponentVersionsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResolvedComponentVersion(entry, context);
    });
    return retVal;
};
const de_SystemResourceLimits = (output, context) => {
    return take(output, {
        cpus: __limitedParseDouble,
        memory: __expectLong,
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _hF = "historyFilter";
const _iET = "iotEndpointType";
const _mR = "maxResults";
const _nT = "nextToken";
const _pTA = "parentTargetArn";
const _r = "runtime";
const _rAS = "retryAfterSeconds";
const _rOF = "recipeOutputFormat";
const _ra = "retry-after";
const _s = "scope";
const _sET = "s3EndpointType";
const _st = "status";
const _tA = "targetArn";
const _tF = "topologyFilter";
const _tGA = "thingGroupArn";
const _tK = "tagKeys";
const _xaiet = "x-amz-iot-endpoint-type";
