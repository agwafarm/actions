import { GreengrassV2ServiceException as __BaseException } from "./GreengrassV2ServiceException";
export class AccessDeniedException extends __BaseException {
    name = "AccessDeniedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
    }
}
export class InternalServerException extends __BaseException {
    name = "InternalServerException";
    $fault = "server";
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export const ValidationExceptionReason = {
    CANNOT_PARSE: "CANNOT_PARSE",
    FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED",
    OTHER: "OTHER",
    UNKNOWN_OPERATION: "UNKNOWN_OPERATION",
};
export class ValidationException extends __BaseException {
    name = "ValidationException";
    $fault = "client";
    reason;
    fields;
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.reason = opts.reason;
        this.fields = opts.fields;
    }
}
export class ResourceNotFoundException extends __BaseException {
    name = "ResourceNotFoundException";
    $fault = "client";
    resourceId;
    resourceType;
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export class ThrottlingException extends __BaseException {
    name = "ThrottlingException";
    $fault = "client";
    quotaCode;
    serviceCode;
    retryAfterSeconds;
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.quotaCode = opts.quotaCode;
        this.serviceCode = opts.serviceCode;
        this.retryAfterSeconds = opts.retryAfterSeconds;
    }
}
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    resourceId;
    resourceType;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
    }
}
export const CloudComponentState = {
    DEPLOYABLE: "DEPLOYABLE",
    DEPRECATED: "DEPRECATED",
    FAILED: "FAILED",
    INITIATED: "INITIATED",
    REQUESTED: "REQUESTED",
};
export const VendorGuidance = {
    ACTIVE: "ACTIVE",
    DELETED: "DELETED",
    DISCONTINUED: "DISCONTINUED",
};
export const ComponentDependencyType = {
    HARD: "HARD",
    SOFT: "SOFT",
};
export const ComponentVisibilityScope = {
    PRIVATE: "PRIVATE",
    PUBLIC: "PUBLIC",
};
export const CoreDeviceStatus = {
    HEALTHY: "HEALTHY",
    UNHEALTHY: "UNHEALTHY",
};
export const LambdaEventSourceType = {
    IOT_CORE: "IOT_CORE",
    PUB_SUB: "PUB_SUB",
};
export const LambdaInputPayloadEncodingType = {
    BINARY: "binary",
    JSON: "json",
};
export const LambdaFilesystemPermission = {
    RO: "ro",
    RW: "rw",
};
export const LambdaIsolationMode = {
    GREENGRASS_CONTAINER: "GreengrassContainer",
    NO_CONTAINER: "NoContainer",
};
export class RequestAlreadyInProgressException extends __BaseException {
    name = "RequestAlreadyInProgressException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RequestAlreadyInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RequestAlreadyInProgressException.prototype);
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    name = "ServiceQuotaExceededException";
    $fault = "client";
    resourceId;
    resourceType;
    quotaCode;
    serviceCode;
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.resourceId = opts.resourceId;
        this.resourceType = opts.resourceType;
        this.quotaCode = opts.quotaCode;
        this.serviceCode = opts.serviceCode;
    }
}
export const DeploymentComponentUpdatePolicyAction = {
    NOTIFY_COMPONENTS: "NOTIFY_COMPONENTS",
    SKIP_NOTIFY_COMPONENTS: "SKIP_NOTIFY_COMPONENTS",
};
export const DeploymentFailureHandlingPolicy = {
    DO_NOTHING: "DO_NOTHING",
    ROLLBACK: "ROLLBACK",
};
export const IoTJobAbortAction = {
    CANCEL: "CANCEL",
};
export const IoTJobExecutionFailureType = {
    ALL: "ALL",
    FAILED: "FAILED",
    REJECTED: "REJECTED",
    TIMED_OUT: "TIMED_OUT",
};
export const DeploymentStatus = {
    ACTIVE: "ACTIVE",
    CANCELED: "CANCELED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INACTIVE: "INACTIVE",
};
export const DeploymentHistoryFilter = {
    ALL: "ALL",
    LATEST_ONLY: "LATEST_ONLY",
};
export const EffectiveDeploymentExecutionStatus = {
    CANCELED: "CANCELED",
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    QUEUED: "QUEUED",
    REJECTED: "REJECTED",
    SUCCEEDED: "SUCCEEDED",
    TIMED_OUT: "TIMED_OUT",
};
export const RecipeOutputFormat = {
    JSON: "JSON",
    YAML: "YAML",
};
export const IotEndpointType = {
    fips: "fips",
    standard: "standard",
};
export const S3EndpointType = {
    GLOBAL: "GLOBAL",
    REGIONAL: "REGIONAL",
};
export const InstalledComponentTopologyFilter = {
    ALL: "ALL",
    ROOT: "ROOT",
};
export const InstalledComponentLifecycleState = {
    BROKEN: "BROKEN",
    ERRORED: "ERRORED",
    FINISHED: "FINISHED",
    INSTALLED: "INSTALLED",
    NEW: "NEW",
    RUNNING: "RUNNING",
    STARTING: "STARTING",
    STOPPING: "STOPPING",
};
