import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { GreengrassV2ServiceException as __BaseException } from "./GreengrassV2ServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export interface AssociateClientDeviceWithCoreDeviceEntry {
  thingName: string | undefined;
}
export interface AssociateClientDeviceWithCoreDeviceErrorEntry {
  thingName?: string | undefined;
  code?: string | undefined;
  message?: string | undefined;
}
export interface AssociatedClientDevice {
  thingName?: string | undefined;
  associationTimestamp?: Date | undefined;
}
export interface AssociateServiceRoleToAccountRequest {
  roleArn: string | undefined;
}
export interface AssociateServiceRoleToAccountResponse {
  associatedAt?: string | undefined;
}
export declare class InternalServerException extends __BaseException {
  readonly name: "InternalServerException";
  readonly $fault: "server";
  retryAfterSeconds?: number | undefined;
  constructor(
    opts: __ExceptionOptionType<InternalServerException, __BaseException>
  );
}
export interface ValidationExceptionField {
  name: string | undefined;
  message: string | undefined;
}
export declare const ValidationExceptionReason: {
  readonly CANNOT_PARSE: "CANNOT_PARSE";
  readonly FIELD_VALIDATION_FAILED: "FIELD_VALIDATION_FAILED";
  readonly OTHER: "OTHER";
  readonly UNKNOWN_OPERATION: "UNKNOWN_OPERATION";
};
export type ValidationExceptionReason =
  (typeof ValidationExceptionReason)[keyof typeof ValidationExceptionReason];
export declare class ValidationException extends __BaseException {
  readonly name: "ValidationException";
  readonly $fault: "client";
  reason?: ValidationExceptionReason | undefined;
  fields?: ValidationExceptionField[] | undefined;
  constructor(
    opts: __ExceptionOptionType<ValidationException, __BaseException>
  );
}
export interface BatchAssociateClientDeviceWithCoreDeviceRequest {
  entries?: AssociateClientDeviceWithCoreDeviceEntry[] | undefined;
  coreDeviceThingName: string | undefined;
}
export interface BatchAssociateClientDeviceWithCoreDeviceResponse {
  errorEntries?: AssociateClientDeviceWithCoreDeviceErrorEntry[] | undefined;
}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class ThrottlingException extends __BaseException {
  readonly name: "ThrottlingException";
  readonly $fault: "client";
  quotaCode?: string | undefined;
  serviceCode?: string | undefined;
  retryAfterSeconds?: number | undefined;
  constructor(
    opts: __ExceptionOptionType<ThrottlingException, __BaseException>
  );
}
export interface DisassociateClientDeviceFromCoreDeviceEntry {
  thingName: string | undefined;
}
export interface BatchDisassociateClientDeviceFromCoreDeviceRequest {
  entries?: DisassociateClientDeviceFromCoreDeviceEntry[] | undefined;
  coreDeviceThingName: string | undefined;
}
export interface DisassociateClientDeviceFromCoreDeviceErrorEntry {
  thingName?: string | undefined;
  code?: string | undefined;
  message?: string | undefined;
}
export interface BatchDisassociateClientDeviceFromCoreDeviceResponse {
  errorEntries?: DisassociateClientDeviceFromCoreDeviceErrorEntry[] | undefined;
}
export interface CancelDeploymentRequest {
  deploymentId: string | undefined;
}
export interface CancelDeploymentResponse {
  message?: string | undefined;
}
export declare class ConflictException extends __BaseException {
  readonly name: "ConflictException";
  readonly $fault: "client";
  resourceId: string | undefined;
  resourceType: string | undefined;
  constructor(opts: __ExceptionOptionType<ConflictException, __BaseException>);
}
export declare const CloudComponentState: {
  readonly DEPLOYABLE: "DEPLOYABLE";
  readonly DEPRECATED: "DEPRECATED";
  readonly FAILED: "FAILED";
  readonly INITIATED: "INITIATED";
  readonly REQUESTED: "REQUESTED";
};
export type CloudComponentState =
  (typeof CloudComponentState)[keyof typeof CloudComponentState];
export declare const VendorGuidance: {
  readonly ACTIVE: "ACTIVE";
  readonly DELETED: "DELETED";
  readonly DISCONTINUED: "DISCONTINUED";
};
export type VendorGuidance =
  (typeof VendorGuidance)[keyof typeof VendorGuidance];
export interface CloudComponentStatus {
  componentState?: CloudComponentState | undefined;
  message?: string | undefined;
  errors?: Record<string, string> | undefined;
  vendorGuidance?: VendorGuidance | undefined;
  vendorGuidanceMessage?: string | undefined;
}
export interface ComponentPlatform {
  name?: string | undefined;
  attributes?: Record<string, string> | undefined;
}
export interface ComponentLatestVersion {
  arn?: string | undefined;
  componentVersion?: string | undefined;
  creationTimestamp?: Date | undefined;
  description?: string | undefined;
  publisher?: string | undefined;
  platforms?: ComponentPlatform[] | undefined;
}
export interface Component {
  arn?: string | undefined;
  componentName?: string | undefined;
  latestVersion?: ComponentLatestVersion | undefined;
}
export interface ComponentCandidate {
  componentName?: string | undefined;
  componentVersion?: string | undefined;
  versionRequirements?: Record<string, string> | undefined;
}
export interface ComponentConfigurationUpdate {
  merge?: string | undefined;
  reset?: string[] | undefined;
}
export declare const ComponentDependencyType: {
  readonly HARD: "HARD";
  readonly SOFT: "SOFT";
};
export type ComponentDependencyType =
  (typeof ComponentDependencyType)[keyof typeof ComponentDependencyType];
export interface ComponentDependencyRequirement {
  versionRequirement?: string | undefined;
  dependencyType?: ComponentDependencyType | undefined;
}
export interface SystemResourceLimits {
  memory?: number | undefined;
  cpus?: number | undefined;
}
export interface ComponentRunWith {
  posixUser?: string | undefined;
  systemResourceLimits?: SystemResourceLimits | undefined;
  windowsUser?: string | undefined;
}
export interface ComponentDeploymentSpecification {
  componentVersion: string | undefined;
  configurationUpdate?: ComponentConfigurationUpdate | undefined;
  runWith?: ComponentRunWith | undefined;
}
export interface ComponentVersionListItem {
  componentName?: string | undefined;
  componentVersion?: string | undefined;
  arn?: string | undefined;
}
export declare const ComponentVisibilityScope: {
  readonly PRIVATE: "PRIVATE";
  readonly PUBLIC: "PUBLIC";
};
export type ComponentVisibilityScope =
  (typeof ComponentVisibilityScope)[keyof typeof ComponentVisibilityScope];
export interface ConnectivityInfo {
  id?: string | undefined;
  hostAddress?: string | undefined;
  portNumber?: number | undefined;
  metadata?: string | undefined;
}
export declare const CoreDeviceStatus: {
  readonly HEALTHY: "HEALTHY";
  readonly UNHEALTHY: "UNHEALTHY";
};
export type CoreDeviceStatus =
  (typeof CoreDeviceStatus)[keyof typeof CoreDeviceStatus];
export interface CoreDevice {
  coreDeviceThingName?: string | undefined;
  status?: CoreDeviceStatus | undefined;
  lastStatusUpdateTimestamp?: Date | undefined;
  platform?: string | undefined;
  architecture?: string | undefined;
  runtime?: string | undefined;
}
export declare const LambdaEventSourceType: {
  readonly IOT_CORE: "IOT_CORE";
  readonly PUB_SUB: "PUB_SUB";
};
export type LambdaEventSourceType =
  (typeof LambdaEventSourceType)[keyof typeof LambdaEventSourceType];
export interface LambdaEventSource {
  topic: string | undefined;
  type: LambdaEventSourceType | undefined;
}
export declare const LambdaInputPayloadEncodingType: {
  readonly BINARY: "binary";
  readonly JSON: "json";
};
export type LambdaInputPayloadEncodingType =
  (typeof LambdaInputPayloadEncodingType)[keyof typeof LambdaInputPayloadEncodingType];
export declare const LambdaFilesystemPermission: {
  readonly RO: "ro";
  readonly RW: "rw";
};
export type LambdaFilesystemPermission =
  (typeof LambdaFilesystemPermission)[keyof typeof LambdaFilesystemPermission];
export interface LambdaDeviceMount {
  path: string | undefined;
  permission?: LambdaFilesystemPermission | undefined;
  addGroupOwner?: boolean | undefined;
}
export interface LambdaVolumeMount {
  sourcePath: string | undefined;
  destinationPath: string | undefined;
  permission?: LambdaFilesystemPermission | undefined;
  addGroupOwner?: boolean | undefined;
}
export interface LambdaContainerParams {
  memorySizeInKB?: number | undefined;
  mountROSysfs?: boolean | undefined;
  volumes?: LambdaVolumeMount[] | undefined;
  devices?: LambdaDeviceMount[] | undefined;
}
export declare const LambdaIsolationMode: {
  readonly GREENGRASS_CONTAINER: "GreengrassContainer";
  readonly NO_CONTAINER: "NoContainer";
};
export type LambdaIsolationMode =
  (typeof LambdaIsolationMode)[keyof typeof LambdaIsolationMode];
export interface LambdaLinuxProcessParams {
  isolationMode?: LambdaIsolationMode | undefined;
  containerParams?: LambdaContainerParams | undefined;
}
export interface LambdaExecutionParameters {
  eventSources?: LambdaEventSource[] | undefined;
  maxQueueSize?: number | undefined;
  maxInstancesCount?: number | undefined;
  maxIdleTimeInSeconds?: number | undefined;
  timeoutInSeconds?: number | undefined;
  statusTimeoutInSeconds?: number | undefined;
  pinned?: boolean | undefined;
  inputPayloadEncodingType?: LambdaInputPayloadEncodingType | undefined;
  execArgs?: string[] | undefined;
  environmentVariables?: Record<string, string> | undefined;
  linuxProcessParams?: LambdaLinuxProcessParams | undefined;
}
export interface LambdaFunctionRecipeSource {
  lambdaArn: string | undefined;
  componentName?: string | undefined;
  componentVersion?: string | undefined;
  componentPlatforms?: ComponentPlatform[] | undefined;
  componentDependencies?:
    | Record<string, ComponentDependencyRequirement>
    | undefined;
  componentLambdaParameters?: LambdaExecutionParameters | undefined;
}
export interface CreateComponentVersionRequest {
  inlineRecipe?: Uint8Array | undefined;
  lambdaFunction?: LambdaFunctionRecipeSource | undefined;
  tags?: Record<string, string> | undefined;
  clientToken?: string | undefined;
}
export interface CreateComponentVersionResponse {
  arn?: string | undefined;
  componentName: string | undefined;
  componentVersion: string | undefined;
  creationTimestamp: Date | undefined;
  status: CloudComponentStatus | undefined;
}
export declare class RequestAlreadyInProgressException extends __BaseException {
  readonly name: "RequestAlreadyInProgressException";
  readonly $fault: "client";
  constructor(
    opts: __ExceptionOptionType<
      RequestAlreadyInProgressException,
      __BaseException
    >
  );
}
export declare class ServiceQuotaExceededException extends __BaseException {
  readonly name: "ServiceQuotaExceededException";
  readonly $fault: "client";
  resourceId?: string | undefined;
  resourceType?: string | undefined;
  quotaCode: string | undefined;
  serviceCode: string | undefined;
  constructor(
    opts: __ExceptionOptionType<ServiceQuotaExceededException, __BaseException>
  );
}
export declare const DeploymentComponentUpdatePolicyAction: {
  readonly NOTIFY_COMPONENTS: "NOTIFY_COMPONENTS";
  readonly SKIP_NOTIFY_COMPONENTS: "SKIP_NOTIFY_COMPONENTS";
};
export type DeploymentComponentUpdatePolicyAction =
  (typeof DeploymentComponentUpdatePolicyAction)[keyof typeof DeploymentComponentUpdatePolicyAction];
export interface DeploymentComponentUpdatePolicy {
  timeoutInSeconds?: number | undefined;
  action?: DeploymentComponentUpdatePolicyAction | undefined;
}
export interface DeploymentConfigurationValidationPolicy {
  timeoutInSeconds?: number | undefined;
}
export declare const DeploymentFailureHandlingPolicy: {
  readonly DO_NOTHING: "DO_NOTHING";
  readonly ROLLBACK: "ROLLBACK";
};
export type DeploymentFailureHandlingPolicy =
  (typeof DeploymentFailureHandlingPolicy)[keyof typeof DeploymentFailureHandlingPolicy];
export interface DeploymentPolicies {
  failureHandlingPolicy?: DeploymentFailureHandlingPolicy | undefined;
  componentUpdatePolicy?: DeploymentComponentUpdatePolicy | undefined;
  configurationValidationPolicy?:
    | DeploymentConfigurationValidationPolicy
    | undefined;
}
export declare const IoTJobAbortAction: {
  readonly CANCEL: "CANCEL";
};
export type IoTJobAbortAction =
  (typeof IoTJobAbortAction)[keyof typeof IoTJobAbortAction];
export declare const IoTJobExecutionFailureType: {
  readonly ALL: "ALL";
  readonly FAILED: "FAILED";
  readonly REJECTED: "REJECTED";
  readonly TIMED_OUT: "TIMED_OUT";
};
export type IoTJobExecutionFailureType =
  (typeof IoTJobExecutionFailureType)[keyof typeof IoTJobExecutionFailureType];
export interface IoTJobAbortCriteria {
  failureType: IoTJobExecutionFailureType | undefined;
  action: IoTJobAbortAction | undefined;
  thresholdPercentage: number | undefined;
  minNumberOfExecutedThings: number | undefined;
}
export interface IoTJobAbortConfig {
  criteriaList: IoTJobAbortCriteria[] | undefined;
}
export interface IoTJobRateIncreaseCriteria {
  numberOfNotifiedThings?: number | undefined;
  numberOfSucceededThings?: number | undefined;
}
export interface IoTJobExponentialRolloutRate {
  baseRatePerMinute: number | undefined;
  incrementFactor: number | undefined;
  rateIncreaseCriteria: IoTJobRateIncreaseCriteria | undefined;
}
export interface IoTJobExecutionsRolloutConfig {
  exponentialRate?: IoTJobExponentialRolloutRate | undefined;
  maximumPerMinute?: number | undefined;
}
export interface IoTJobTimeoutConfig {
  inProgressTimeoutInMinutes?: number | undefined;
}
export interface DeploymentIoTJobConfiguration {
  jobExecutionsRolloutConfig?: IoTJobExecutionsRolloutConfig | undefined;
  abortConfig?: IoTJobAbortConfig | undefined;
  timeoutConfig?: IoTJobTimeoutConfig | undefined;
}
export interface CreateDeploymentRequest {
  targetArn: string | undefined;
  deploymentName?: string | undefined;
  components?: Record<string, ComponentDeploymentSpecification> | undefined;
  iotJobConfiguration?: DeploymentIoTJobConfiguration | undefined;
  deploymentPolicies?: DeploymentPolicies | undefined;
  parentTargetArn?: string | undefined;
  tags?: Record<string, string> | undefined;
  clientToken?: string | undefined;
}
export interface CreateDeploymentResponse {
  deploymentId?: string | undefined;
  iotJobId?: string | undefined;
  iotJobArn?: string | undefined;
}
export interface DeleteComponentRequest {
  arn: string | undefined;
}
export interface DeleteCoreDeviceRequest {
  coreDeviceThingName: string | undefined;
}
export interface DeleteDeploymentRequest {
  deploymentId: string | undefined;
}
export declare const DeploymentStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CANCELED: "CANCELED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly INACTIVE: "INACTIVE";
};
export type DeploymentStatus =
  (typeof DeploymentStatus)[keyof typeof DeploymentStatus];
export interface Deployment {
  targetArn?: string | undefined;
  revisionId?: string | undefined;
  deploymentId?: string | undefined;
  deploymentName?: string | undefined;
  creationTimestamp?: Date | undefined;
  deploymentStatus?: DeploymentStatus | undefined;
  isLatestForTarget?: boolean | undefined;
  parentTargetArn?: string | undefined;
}
export declare const DeploymentHistoryFilter: {
  readonly ALL: "ALL";
  readonly LATEST_ONLY: "LATEST_ONLY";
};
export type DeploymentHistoryFilter =
  (typeof DeploymentHistoryFilter)[keyof typeof DeploymentHistoryFilter];
export interface DescribeComponentRequest {
  arn: string | undefined;
}
export interface DescribeComponentResponse {
  arn?: string | undefined;
  componentName?: string | undefined;
  componentVersion?: string | undefined;
  creationTimestamp?: Date | undefined;
  publisher?: string | undefined;
  description?: string | undefined;
  status?: CloudComponentStatus | undefined;
  platforms?: ComponentPlatform[] | undefined;
  tags?: Record<string, string> | undefined;
}
export interface DisassociateServiceRoleFromAccountRequest {}
export interface DisassociateServiceRoleFromAccountResponse {
  disassociatedAt?: string | undefined;
}
export declare const EffectiveDeploymentExecutionStatus: {
  readonly CANCELED: "CANCELED";
  readonly COMPLETED: "COMPLETED";
  readonly FAILED: "FAILED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly QUEUED: "QUEUED";
  readonly REJECTED: "REJECTED";
  readonly SUCCEEDED: "SUCCEEDED";
  readonly TIMED_OUT: "TIMED_OUT";
};
export type EffectiveDeploymentExecutionStatus =
  (typeof EffectiveDeploymentExecutionStatus)[keyof typeof EffectiveDeploymentExecutionStatus];
export interface EffectiveDeploymentStatusDetails {
  errorStack?: string[] | undefined;
  errorTypes?: string[] | undefined;
}
export interface EffectiveDeployment {
  deploymentId: string | undefined;
  deploymentName: string | undefined;
  iotJobId?: string | undefined;
  iotJobArn?: string | undefined;
  description?: string | undefined;
  targetArn: string | undefined;
  coreDeviceExecutionStatus: EffectiveDeploymentExecutionStatus | undefined;
  reason?: string | undefined;
  creationTimestamp: Date | undefined;
  modifiedTimestamp: Date | undefined;
  statusDetails?: EffectiveDeploymentStatusDetails | undefined;
}
export declare const RecipeOutputFormat: {
  readonly JSON: "JSON";
  readonly YAML: "YAML";
};
export type RecipeOutputFormat =
  (typeof RecipeOutputFormat)[keyof typeof RecipeOutputFormat];
export interface GetComponentRequest {
  recipeOutputFormat?: RecipeOutputFormat | undefined;
  arn: string | undefined;
}
export interface GetComponentResponse {
  recipeOutputFormat: RecipeOutputFormat | undefined;
  recipe: Uint8Array | undefined;
  tags?: Record<string, string> | undefined;
}
export declare const IotEndpointType: {
  readonly fips: "fips";
  readonly standard: "standard";
};
export type IotEndpointType =
  (typeof IotEndpointType)[keyof typeof IotEndpointType];
export declare const S3EndpointType: {
  readonly GLOBAL: "GLOBAL";
  readonly REGIONAL: "REGIONAL";
};
export type S3EndpointType =
  (typeof S3EndpointType)[keyof typeof S3EndpointType];
export interface GetComponentVersionArtifactRequest {
  arn: string | undefined;
  artifactName: string | undefined;
  s3EndpointType?: S3EndpointType | undefined;
  iotEndpointType?: IotEndpointType | undefined;
}
export interface GetComponentVersionArtifactResponse {
  preSignedUrl: string | undefined;
}
export interface GetConnectivityInfoRequest {
  thingName: string | undefined;
}
export interface GetConnectivityInfoResponse {
  connectivityInfo?: ConnectivityInfo[] | undefined;
  message?: string | undefined;
}
export interface GetCoreDeviceRequest {
  coreDeviceThingName: string | undefined;
}
export interface GetCoreDeviceResponse {
  coreDeviceThingName?: string | undefined;
  coreVersion?: string | undefined;
  platform?: string | undefined;
  architecture?: string | undefined;
  runtime?: string | undefined;
  status?: CoreDeviceStatus | undefined;
  lastStatusUpdateTimestamp?: Date | undefined;
  tags?: Record<string, string> | undefined;
}
export interface GetDeploymentRequest {
  deploymentId: string | undefined;
}
export interface GetDeploymentResponse {
  targetArn?: string | undefined;
  revisionId?: string | undefined;
  deploymentId?: string | undefined;
  deploymentName?: string | undefined;
  deploymentStatus?: DeploymentStatus | undefined;
  iotJobId?: string | undefined;
  iotJobArn?: string | undefined;
  components?: Record<string, ComponentDeploymentSpecification> | undefined;
  deploymentPolicies?: DeploymentPolicies | undefined;
  iotJobConfiguration?: DeploymentIoTJobConfiguration | undefined;
  creationTimestamp?: Date | undefined;
  isLatestForTarget?: boolean | undefined;
  parentTargetArn?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface GetServiceRoleForAccountRequest {}
export interface GetServiceRoleForAccountResponse {
  associatedAt?: string | undefined;
  roleArn?: string | undefined;
}
export interface ListClientDevicesAssociatedWithCoreDeviceRequest {
  coreDeviceThingName: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListClientDevicesAssociatedWithCoreDeviceResponse {
  associatedClientDevices?: AssociatedClientDevice[] | undefined;
  nextToken?: string | undefined;
}
export interface ListComponentsRequest {
  scope?: ComponentVisibilityScope | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListComponentsResponse {
  components?: Component[] | undefined;
  nextToken?: string | undefined;
}
export interface ListComponentVersionsRequest {
  arn: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListComponentVersionsResponse {
  componentVersions?: ComponentVersionListItem[] | undefined;
  nextToken?: string | undefined;
}
export interface ListCoreDevicesRequest {
  thingGroupArn?: string | undefined;
  status?: CoreDeviceStatus | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
  runtime?: string | undefined;
}
export interface ListCoreDevicesResponse {
  coreDevices?: CoreDevice[] | undefined;
  nextToken?: string | undefined;
}
export interface ListDeploymentsRequest {
  targetArn?: string | undefined;
  historyFilter?: DeploymentHistoryFilter | undefined;
  parentTargetArn?: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListDeploymentsResponse {
  deployments?: Deployment[] | undefined;
  nextToken?: string | undefined;
}
export interface ListEffectiveDeploymentsRequest {
  coreDeviceThingName: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListEffectiveDeploymentsResponse {
  effectiveDeployments?: EffectiveDeployment[] | undefined;
  nextToken?: string | undefined;
}
export declare const InstalledComponentTopologyFilter: {
  readonly ALL: "ALL";
  readonly ROOT: "ROOT";
};
export type InstalledComponentTopologyFilter =
  (typeof InstalledComponentTopologyFilter)[keyof typeof InstalledComponentTopologyFilter];
export interface ListInstalledComponentsRequest {
  coreDeviceThingName: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
  topologyFilter?: InstalledComponentTopologyFilter | undefined;
}
export declare const InstalledComponentLifecycleState: {
  readonly BROKEN: "BROKEN";
  readonly ERRORED: "ERRORED";
  readonly FINISHED: "FINISHED";
  readonly INSTALLED: "INSTALLED";
  readonly NEW: "NEW";
  readonly RUNNING: "RUNNING";
  readonly STARTING: "STARTING";
  readonly STOPPING: "STOPPING";
};
export type InstalledComponentLifecycleState =
  (typeof InstalledComponentLifecycleState)[keyof typeof InstalledComponentLifecycleState];
export interface InstalledComponent {
  componentName?: string | undefined;
  componentVersion?: string | undefined;
  lifecycleState?: InstalledComponentLifecycleState | undefined;
  lifecycleStateDetails?: string | undefined;
  isRoot?: boolean | undefined;
  lastStatusChangeTimestamp?: Date | undefined;
  lastReportedTimestamp?: Date | undefined;
  lastInstallationSource?: string | undefined;
  lifecycleStatusCodes?: string[] | undefined;
}
export interface ListInstalledComponentsResponse {
  installedComponents?: InstalledComponent[] | undefined;
  nextToken?: string | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string> | undefined;
}
export interface ResolveComponentCandidatesRequest {
  platform?: ComponentPlatform | undefined;
  componentCandidates?: ComponentCandidate[] | undefined;
}
export interface ResolvedComponentVersion {
  arn?: string | undefined;
  componentName?: string | undefined;
  componentVersion?: string | undefined;
  recipe?: Uint8Array | undefined;
  vendorGuidance?: VendorGuidance | undefined;
  message?: string | undefined;
}
export interface ResolveComponentCandidatesResponse {
  resolvedComponentVersions?: ResolvedComponentVersion[] | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface UpdateConnectivityInfoRequest {
  thingName: string | undefined;
  connectivityInfo: ConnectivityInfo[] | undefined;
}
export interface UpdateConnectivityInfoResponse {
  version?: string | undefined;
  message?: string | undefined;
}
