Parameters:
  Environment:
    Type: String
  TemplateUrlPrefix:
    Type: String
  LambdaPrefix:
    Type: String
  LayerPrefix:
    Type: String
  ArtifactsBucket:
    Type: String
  CompanyName:
    Type: String
  ServiceName:
    Type: String
Resources:
  resourcesCognitoUserPoolIdParameterD8918C4B:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Ref: CognitoUserPoolusersUserPool89376787
      Name:
        Fn::Join:
          - ""
          - - /infra/
            - Ref: Environment
            - /auth/cognito/user-pool/id/agronomist-service
  resourcesCognitoUserPoolClientAppIdParameter5CD0B116:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Ref: CognitoUserPoolusersUserPoolusersUserPoolClientApp6F150F91
      Name:
        Fn::Join:
          - ""
          - - /infra/
            - Ref: Environment
            - /auth/cognito/user-pool/client/id/agronomist-service
  resourcesCognitoIdentityPoolIdParameterCDFE2EC9:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Ref: IdentityPool
      Name:
        Fn::Join:
          - ""
          - - /infra/
            - Ref: Environment
            - /auth/cognito/identity-pool/id/agronomist-service
  CognitoUserPoolusersUserPool89376787:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: The verification code to your new account is {####}
      EmailVerificationSubject: Verify your new account
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Mutable: true
          Name: name
          Required: true
        - Mutable: true
          Name: email
          Required: true
        - Mutable: true
          Name: email_verified
          Required: false
      SmsVerificationMessage: The verification code to your new account is {####}
      UserPoolName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-users
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: The verification code to your new account is {####}
        EmailSubject: Verify your new account
        SmsMessage: The verification code to your new account is {####}
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  CognitoUserPoolusersUserPoolusersUserPoolClientApp6F150F91:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: CognitoUserPoolusersUserPool89376787
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthScopes:
        - profile
        - phone
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - https://example.com
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      WriteAttributes:
        - email
        - name
  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      AllowClassicFlow: true
      CognitoIdentityProviders:
        - ClientId:
            Ref: CognitoUserPoolusersUserPoolusersUserPoolClientApp6F150F91
          ProviderName:
            Fn::GetAtt:
              - CognitoUserPoolusersUserPool89376787
              - ProviderName
          ServerSideTokenCheck: false
      IdentityPoolName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-identities
  AuthenticatedRole86104F1A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: "2012-10-17"
      RoleName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-authenticatedRole
  AuthenticatedRoleDefaultPolicy8B1AC271:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: cognito-identity:*
            Effect: Allow
            Resource: "*"
          - Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::GetAtt:
                  - controllercameraframesBucketE0722EDD
                  - Arn
              - Fn::Join:
                  - ""
                  - - Fn::GetAtt:
                        - controllercameraframesBucketE0722EDD
                        - Arn
                    - /*
        Version: "2012-10-17"
      PolicyName: AuthenticatedRoleDefaultPolicy8B1AC271
      Roles:
        - Ref: AuthenticatedRole86104F1A
  UnauthenticatedRole01CC4258:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud:
                  Ref: IdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: unauthenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: "2012-10-17"
      RoleName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-unauthenticatedRole
  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
            - AuthenticatedRole86104F1A
            - Arn
        unauthenticated:
          Fn::GetAtt:
            - UnauthenticatedRole01CC4258
            - Arn
  serviceRestApiUrlParameterE84B23D3:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::Join:
          - ""
          - - https://
            - Ref: RestApi0C43BF4B
            - .execute-api.
            - Ref: AWS::Region
            - "."
            - Ref: AWS::URLSuffix
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /
      Name:
        Fn::Join:
          - ""
          - - /infra/
            - Ref: Environment
            - /backend/rest/url/agronomist-service
  serviceCognitoAuthorizer016061C3:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      RestApiId:
        Ref: RestApi0C43BF4B
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      Name: agronomistserviceCognitoAuthorizer054F3E9C
      ProviderARNs:
        - Fn::GetAtt:
            - CognitoUserPoolusersUserPool89376787
            - Arn
  agronomistservicecloudcommonLayer6170D20A:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Content:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LayerPrefix
              - /cloud-common.zip
      LayerName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-cloud-common
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  agronomistservicecontrollerframefetcherFuncServiceRole3EE168EB:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicecontrollerframefetcherFuncF1EDCC46:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /controller_frame_fetcher.zip
      Role:
        Fn::GetAtt:
          - agronomistservicecontrollerframefetcherFuncServiceRole3EE168EB
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_frame_fetcher
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicecontrollerframefetcherFuncServiceRole3EE168EB
  agronomistservicecontrollerframefetcherFuncInvokeServicePrincipalapigatewayamazonawscom928037BE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerframefetcherFuncF1EDCC46
          - Arn
      Principal: apigateway.amazonaws.com
  controllerframefetcherErrorAlarmF4E43032:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_frame_fetcher lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_frame_fetcherErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerframefetcherFuncF1EDCC46
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  controllerframefetcherThrottleAlarm27BB7482:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_frame_fetcher lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_frame_fetcherThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerframefetcherFuncF1EDCC46
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistservicecontrollerframeindexerFuncServiceRole29DE252E:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicecontrollerframeindexerFuncServiceRoleDefaultPolicyF221D8E2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:ReceiveMessage
              - sqs:ChangeMessageVisibility
              - sqs:GetQueueUrl
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - controllerframeindexers3S3Queue72AEA72C
                - Arn
        Version: "2012-10-17"
      PolicyName: agronomistservicecontrollerframeindexerFuncServiceRoleDefaultPolicyF221D8E2
      Roles:
        - Ref: agronomistservicecontrollerframeindexerFuncServiceRole29DE252E
  agronomistservicecontrollerframeindexerFuncAE042C43:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /controller_frame_indexer.zip
      Role:
        Fn::GetAtt:
          - agronomistservicecontrollerframeindexerFuncServiceRole29DE252E
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_frame_indexer
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicecontrollerframeindexerFuncServiceRoleDefaultPolicyF221D8E2
      - agronomistservicecontrollerframeindexerFuncServiceRole29DE252E
  agronomistservicecontrollerframeindexerFuncInvokeServicePrincipalsqsamazonawscom7F831340:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerframeindexerFuncAE042C43
          - Arn
      Principal: sqs.amazonaws.com
  agronomistservicecontrollerframeindexerFunccontrollerframeindexers3SqsEventSourceACE6BFC5:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName:
        Ref: agronomistservicecontrollerframeindexerFuncAE042C43
      BatchSize: 10
      EventSourceArn:
        Fn::GetAtt:
          - controllerframeindexers3S3Queue72AEA72C
          - Arn
      MaximumBatchingWindowInSeconds: 300
  controllerframeindexers3S3QueueDLQueue887549B0:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 345600
      QueueName:
        Fn::Join:
          - ""
          - - dlq
            - Ref: Environment
            - -agronomist-service-controller_frame_indexer-s3
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  controllerframeindexers3S3QueueDLQAlarm7F52D575:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription:
        Fn::Join:
          - ""
          - - SNS Alarm for dlq
            - Ref: Environment
            - -agronomist-service-controller_frame_indexer-s3 DLQ Message count
      AlarmName:
        Fn::Join:
          - ""
          - - dlq
            - Ref: Environment
            - -agronomist-service-controller_frame_indexer-s3Alarm
      Metrics:
        - Id: m1
          Label: Number of Messages in DLQ
          MetricStat:
            Metric:
              Dimensions:
                - Name: QueueName
                  Value:
                    Fn::GetAtt:
                      - controllerframeindexers3S3QueueDLQueue887549B0
                      - QueueName
              MetricName: NumberOfMessagesSent
              Namespace: AWS/SQS
            Period: 300
            Stat: Sum
          ReturnData: true
      Threshold: 1
  controllerframeindexers3S3Queue72AEA72C:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_frame_indexer-s3
      ReceiveMessageWaitTimeSeconds: 20
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - controllerframeindexers3S3QueueDLQueue887549B0
            - Arn
        maxReceiveCount: 20
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  controllerframeindexers3S3QueuePolicy375A904E:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sqs:SendMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
            Condition:
              ArnLike:
                aws:SourceArn:
                  Fn::GetAtt:
                    - controllercameraframesBucketE0722EDD
                    - Arn
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Resource:
              Fn::GetAtt:
                - controllerframeindexers3S3Queue72AEA72C
                - Arn
        Version: "2012-10-17"
      Queues:
        - Ref: controllerframeindexers3S3Queue72AEA72C
  controllercameraframesBucketE0722EDD:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agwa-controller-camera-frames
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "*"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  controllercameraframesBucketNotifications5B557A73:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
          - Arn
      BucketName:
        Ref: controllercameraframesBucketE0722EDD
      NotificationConfiguration:
        QueueConfigurations:
          - Events:
              - s3:ObjectCreated:*
            QueueArn:
              Fn::GetAtt:
                - controllerframeindexers3S3Queue72AEA72C
                - Arn
          - Events:
              - s3:ObjectRemoved:Delete
            QueueArn:
              Fn::GetAtt:
                - controllerframeindexers3S3Queue72AEA72C
                - Arn
    DependsOn:
      - controllerframeindexers3S3QueuePolicy375A904E
      - controllerframeindexers3S3Queue72AEA72C
  controllercameraframesBucketNameParameterD30D6F8F:
    Type: AWS::SSM::Parameter
    Properties:
      Type: String
      Value:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agwa-controller-camera-frames
      Name:
        Fn::Join:
          - ""
          - - /infra/
            - Ref: Environment
            - /buckets/controller-camera-frames
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: s3:PutBucketNotification
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications" resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: >-
          exports.handler = (event, context) => {
              // eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies
              const s3 = new (require('aws-sdk').S3)();
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const https = require('https');
              // eslint-disable-next-line @typescript-eslint/no-require-imports
              const url = require('url');
              log(JSON.stringify(event, undefined, 2));
              const props = event.ResourceProperties;
              if (event.RequestType === 'Delete') {
                  props.NotificationConfiguration = {}; // this is how you clean out notifications
              }
              const req = {
                  Bucket: props.BucketName,
                  NotificationConfiguration: props.NotificationConfiguration,
              };
              return s3.putBucketNotificationConfiguration(req, (err, data) => {
                  log({ err, data });
                  if (err) {
                      return submitResponse('FAILED', err.message + `\nMore information in CloudWatch Log Stream: ${context.logStreamName}`);
                  }
                  else {
                      return submitResponse('SUCCESS');
                  }
              });
              function log(obj) {
                  console.error(event.RequestId, event.StackId, event.LogicalResourceId, obj);
              }
              // eslint-disable-next-line max-len
              // adapted from https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html#cfn-lambda-function-code-cfnresponsemodule
              // to allow sending an error message as a reason.
              function submitResponse(responseStatus, reason) {
                  const responseBody = JSON.stringify({
                      Status: responseStatus,
                      Reason: reason || 'See the details in CloudWatch Log Stream: ' + context.logStreamName,
                      PhysicalResourceId: event.PhysicalResourceId || event.LogicalResourceId,
                      StackId: event.StackId,
                      RequestId: event.RequestId,
                      LogicalResourceId: event.LogicalResourceId,
                      NoEcho: false,
                  });
                  log({ responseBody });
                  const parsedUrl = url.parse(event.ResponseURL);
                  const options = {
                      hostname: parsedUrl.hostname,
                      port: 443,
                      path: parsedUrl.path,
                      method: 'PUT',
                      headers: {
                          'content-type': '',
                          'content-length': responseBody.length,
                      },
                  };
                  const request = https.request(options, (r) => {
                      log({ statusCode: r.statusCode, statusMessage: r.statusMessage });
                      context.done();
                  });
                  request.on('error', (error) => {
                      log({ sendError: error });
                      context.done();
                  });
                  request.write(responseBody);
                  request.end();
              }
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
    DependsOn:
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
  controllerframeindexerErrorAlarmCD9D41BD:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_frame_indexer lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_frame_indexerErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerframeindexerFuncAE042C43
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  controllerframeindexerThrottleAlarmA22F1F95:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_frame_indexer lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_frame_indexerThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerframeindexerFuncAE042C43
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistservicecontrollerpolicyfetcherFuncServiceRoleE2E8B3B7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /controller_policy_fetcher.zip
      Role:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyfetcherFuncServiceRoleE2E8B3B7
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_policy_fetcher
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicecontrollerpolicyfetcherFuncServiceRoleE2E8B3B7
  agronomistservicecontrollerpolicyfetcherFuncInvokeServicePrincipalapigatewayamazonawscom2CE42C17:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
          - Arn
      Principal: apigateway.amazonaws.com
  controllerpolicyfetcherErrorAlarmD81243D6:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_policy_fetcher lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_policy_fetcherErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  controllerpolicyfetcherThrottleAlarm1A92BEC4:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_policy_fetcher lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_policy_fetcherThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistservicecontrollerpolicyupdaterFuncServiceRoleCEAE5884:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicecontrollerpolicyupdaterFuncEDF71020:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /controller_policy_updater.zip
      Role:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyupdaterFuncServiceRoleCEAE5884
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_policy_updater
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicecontrollerpolicyupdaterFuncServiceRoleCEAE5884
  agronomistservicecontrollerpolicyupdaterFuncInvokeServicePrincipalapigatewayamazonawscom922D0A9D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyupdaterFuncEDF71020
          - Arn
      Principal: apigateway.amazonaws.com
  controllerpolicyupdaterErrorAlarmA32EC751:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_policy_updater lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_policy_updaterErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerpolicyupdaterFuncEDF71020
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  controllerpolicyupdaterThrottleAlarmA18D23EC:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for controller_policy_updater lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-controller_policy_updaterThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicecontrollerpolicyupdaterFuncEDF71020
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistservicedeviceconfigfetcherFuncServiceRole658BD82C:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicedeviceconfigfetcherFuncA88DC830:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /device_config_fetcher.zip
      Role:
        Fn::GetAtt:
          - agronomistservicedeviceconfigfetcherFuncServiceRole658BD82C
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_config_fetcher
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicedeviceconfigfetcherFuncServiceRole658BD82C
  agronomistservicedeviceconfigfetcherFuncInvokeServicePrincipalapigatewayamazonawscom88CC00BB:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceconfigfetcherFuncA88DC830
          - Arn
      Principal: apigateway.amazonaws.com
  deviceconfigfetcherErrorAlarm33870DF1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_config_fetcher lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_config_fetcherErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedeviceconfigfetcherFuncA88DC830
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  deviceconfigfetcherThrottleAlarmCEA06158:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_config_fetcher lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_config_fetcherThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedeviceconfigfetcherFuncA88DC830
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistservicedevicedescriptorfetcherFuncServiceRole9E7B9A7F:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicedevicedescriptorfetcherFuncC95198A2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /device_descriptor_fetcher.zip
      Role:
        Fn::GetAtt:
          - agronomistservicedevicedescriptorfetcherFuncServiceRole9E7B9A7F
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_descriptor_fetcher
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicedevicedescriptorfetcherFuncServiceRole9E7B9A7F
  agronomistservicedevicedescriptorfetcherFuncInvokeServicePrincipalapigatewayamazonawscom8F61972F:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedevicedescriptorfetcherFuncC95198A2
          - Arn
      Principal: apigateway.amazonaws.com
  devicedescriptorfetcherErrorAlarm430C9D67:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_descriptor_fetcher lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_descriptor_fetcherErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedevicedescriptorfetcherFuncC95198A2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  devicedescriptorfetcherThrottleAlarm2D984A77:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_descriptor_fetcher lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_descriptor_fetcherThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedevicedescriptorfetcherFuncC95198A2
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistservicedeviceeventdispatcherFuncServiceRole2E63BBE8:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicedeviceeventdispatcherFuncB528DA2A:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /device_event_dispatcher.zip
      Role:
        Fn::GetAtt:
          - agronomistservicedeviceeventdispatcherFuncServiceRole2E63BBE8
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_event_dispatcher
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicedeviceeventdispatcherFuncServiceRole2E63BBE8
  agronomistservicedeviceeventdispatcherFuncInvokeServicePrincipalapigatewayamazonawscomE79F5F35:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventdispatcherFuncB528DA2A
          - Arn
      Principal: apigateway.amazonaws.com
  deviceeventdispatcherErrorAlarm613D47D1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_event_dispatcher lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_event_dispatcherErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedeviceeventdispatcherFuncB528DA2A
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  deviceeventdispatcherThrottleAlarm6AA20D07:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_event_dispatcher lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_event_dispatcherThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedeviceeventdispatcherFuncB528DA2A
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistservicedeviceeventfetcherFuncServiceRole38DD179A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistservicedeviceeventfetcherFunc775FE6EC:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /device_event_fetcher.zip
      Role:
        Fn::GetAtt:
          - agronomistservicedeviceeventfetcherFuncServiceRole38DD179A
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_event_fetcher
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistservicedeviceeventfetcherFuncServiceRole38DD179A
  agronomistservicedeviceeventfetcherFuncInvokeServicePrincipalapigatewayamazonawscomA1F024B8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventfetcherFunc775FE6EC
          - Arn
      Principal: apigateway.amazonaws.com
  deviceeventfetcherErrorAlarm410DBCEF:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_event_fetcher lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_event_fetcherErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedeviceeventfetcherFunc775FE6EC
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  deviceeventfetcherThrottleAlarm2D08278E:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for device_event_fetcher lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-device_event_fetcherThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistservicedeviceeventfetcherFunc775FE6EC
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistserviceglobalpolicyfetcherFuncServiceRole3CAF0319:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistserviceglobalpolicyfetcherFunc70FD1750:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /global_policy_fetcher.zip
      Role:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyfetcherFuncServiceRole3CAF0319
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-global_policy_fetcher
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistserviceglobalpolicyfetcherFuncServiceRole3CAF0319
  agronomistserviceglobalpolicyfetcherFuncInvokeServicePrincipalapigatewayamazonawscom7A443DC0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyfetcherFunc70FD1750
          - Arn
      Principal: apigateway.amazonaws.com
  globalpolicyfetcherErrorAlarm66A4FF3B:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for global_policy_fetcher lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-global_policy_fetcherErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistserviceglobalpolicyfetcherFunc70FD1750
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  globalpolicyfetcherThrottleAlarm86415DB2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for global_policy_fetcher lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-global_policy_fetcherThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistserviceglobalpolicyfetcherFunc70FD1750
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistserviceglobalpolicyupdaterFuncServiceRoleA3B796F9:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistserviceglobalpolicyupdaterFuncA73BC0E0:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /global_policy_updater.zip
      Role:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyupdaterFuncServiceRoleA3B796F9
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-global_policy_updater
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistserviceglobalpolicyupdaterFuncServiceRoleA3B796F9
  agronomistserviceglobalpolicyupdaterFuncInvokeServicePrincipalapigatewayamazonawscomC9A29E20:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyupdaterFuncA73BC0E0
          - Arn
      Principal: apigateway.amazonaws.com
  globalpolicyupdaterErrorAlarmE510062B:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for global_policy_updater lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-global_policy_updaterErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistserviceglobalpolicyupdaterFuncA73BC0E0
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  globalpolicyupdaterThrottleAlarmA7A5A764:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for global_policy_updater lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-global_policy_updaterThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistserviceglobalpolicyupdaterFuncA73BC0E0
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  agronomistserviceuserpostsigninFuncServiceRole1745C275:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
  agronomistserviceuserpostsigninFunc0BBC11E9:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Ref: ArtifactsBucket
        S3Key:
          Fn::Join:
            - ""
            - - Ref: LambdaPrefix
              - /user_post_sign_in.zip
      Role:
        Fn::GetAtt:
          - agronomistserviceuserpostsigninFuncServiceRole1745C275
          - Arn
      Environment:
        Variables:
          ENV:
            Ref: Environment
          CORS_ORIGIN: "*"
          CORS_HEADERS: Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer
          CORS_METHODS: OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD
      FunctionName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-user_post_sign_in
      Handler: app.handler.handler
      Layers:
        - Ref: agronomistservicecloudcommonLayer6170D20A
      Runtime: python3.8
      Timeout: 30
    DependsOn:
      - agronomistserviceuserpostsigninFuncServiceRole1745C275
  agronomistserviceuserpostsigninFuncInvokeServicePrincipalapigatewayamazonawscom81C868D3:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceuserpostsigninFunc0BBC11E9
          - Arn
      Principal: apigateway.amazonaws.com
  userpostsigninErrorAlarm3E4E2A63:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for user_post_sign_in lambda errors
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-user_post_sign_inErrorAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistserviceuserpostsigninFunc0BBC11E9
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  userpostsigninThrottleAlarm79E5902C:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      AlarmActions:
        - Fn::Join:
            - ""
            - - "arn:aws:sns:us-west-2:953022346399:"
              - Ref: Environment
              - "-"
              - Ref: Environment
              - -errors-notifications-alerts
      AlarmDescription: SNS Alarm for user_post_sign_in lambda throttling
      AlarmName:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-user_post_sign_inThrottleAlarm
      Dimensions:
        - Name: FunctionName
          Value:
            Ref: agronomistserviceuserpostsigninFunc0BBC11E9
      MetricName: Throttles
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 1
  RestApi0C43BF4B:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Join:
          - ""
          - - Ref: Environment
            - -agronomist-service-api
  RestApiCloudWatchRoleE3ED6605:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  RestApiAccount7C83CF5A:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - RestApiCloudWatchRoleE3ED6605
          - Arn
    DependsOn:
      - RestApi0C43BF4B
  RestApiDeployment180EC503e719aa128d3284dbb998d9b098ed5a1d:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId:
        Ref: RestApi0C43BF4B
      Description: Automatically created by the RestApi construct
    DependsOn:
      - RestApiadmincontrolleridframeGET611F2819
      - RestApiadmincontrolleridframeOPTIONSA6F8D7FA
      - RestApiadmincontrolleridframeABEC85E2
      - RestApiadmincontrolleridOPTIONSEFD18D04
      - RestApiadmincontrolleridF9912E53
      - RestApiadmincontrollerOPTIONS07FC8B9E
      - RestApiadmincontroller15E1F7F0
      - RestApiadmindeviceidconfigGET5BE5E473
      - RestApiadmindeviceidconfigOPTIONS6C5AB423
      - RestApiadmindeviceidconfig01DE198B
      - RestApiadmindeviceideventGET0A065406
      - RestApiadmindeviceideventOPTIONS82C9DD74
      - RestApiadmindeviceideventPOSTDCA58E79
      - RestApiadmindeviceideventCE3013CC
      - RestApiadmindeviceidOPTIONS2C9A4A3A
      - RestApiadmindeviceid99A54DAD
      - RestApiadmindeviceGET0649C25B
      - RestApiadmindeviceOPTIONS85CE2590
      - RestApiadmindeviceC27ACE95
      - RestApiadminOPTIONSE83BC9A1
      - RestApiadminpolicycontrolleridGETD2CA5640
      - RestApiadminpolicycontrolleridOPTIONS3B13FAAE
      - RestApiadminpolicycontrolleridPOSTFD906FC8
      - RestApiadminpolicycontrolleridC3479CB6
      - RestApiadminpolicycontrollerOPTIONSA8F847D7
      - RestApiadminpolicycontroller0B621B6B
      - RestApiadminpolicyglobaldeviceTypeGET3698EAED
      - RestApiadminpolicyglobaldeviceTypeOPTIONS399ABCA6
      - RestApiadminpolicyglobaldeviceTypePOST306371A7
      - RestApiadminpolicyglobaldeviceType86AA2248
      - RestApiadminpolicyglobalOPTIONSA25C2264
      - RestApiadminpolicyglobal20A9298A
      - RestApiadminpolicyOPTIONS6F360C1F
      - RestApiadminpolicy6DA57A4C
      - RestApiadmin3E3D47C6
      - RestApiadminuserOPTIONS94964CC1
      - RestApiadminuserpostsigninOPTIONSD638CE5B
      - RestApiadminuserpostsigninPOSTAA3267D2
      - RestApiadminuserpostsignin431D0C2C
      - RestApiadminuser73C98D70
      - RestApicontrolleridframeGET238CB2F4
      - RestApicontrolleridframeOPTIONSB4A74ACD
      - RestApicontrolleridframeCB9E3091
      - RestApicontrolleridOPTIONS020DD4DF
      - RestApicontrollerid6888ED0C
      - RestApicontrollerOPTIONS5B608975
      - RestApicontroller76BC0AA1
      - RestApideviceidconfigGET533D1A40
      - RestApideviceidconfigOPTIONS39B6C7C8
      - RestApideviceidconfig816D3F04
      - RestApideviceideventGET143EB058
      - RestApideviceideventOPTIONSD4CDBD0C
      - RestApideviceideventPOST251ECCD9
      - RestApideviceidevent47285C93
      - RestApideviceidOPTIONS892CC2A2
      - RestApideviceid267F3870
      - RestApideviceGET5CE59708
      - RestApideviceOPTIONS6B6BBE7F
      - RestApidevice34312178
      - RestApiOPTIONS6AA64D2D
      - RestApipolicycontrolleridGET6B0C6F6E
      - RestApipolicycontrolleridOPTIONSCCB5DE35
      - RestApipolicycontrolleridPOST84EFEA71
      - RestApipolicycontrolleridC600389B
      - RestApipolicycontrollerOPTIONSE80C462D
      - RestApipolicycontroller1011DBCE
      - RestApipolicyglobaldeviceTypeGETDE2C31DB
      - RestApipolicyglobaldeviceTypeOPTIONS2A5D4E10
      - RestApipolicyglobaldeviceTypePOST9B93500D
      - RestApipolicyglobaldeviceType29BEBAD6
      - RestApipolicyglobalOPTIONS575774D1
      - RestApipolicyglobal7E42F925
      - RestApipolicyOPTIONSB82849AF
      - RestApipolicy5BEF8CF9
      - RestApiuserOPTIONS772D24FD
      - RestApiuserpostsigninOPTIONS910196FC
      - RestApiuserpostsigninPOST1001B286
      - RestApiuserpostsigninE73B6278
      - RestApiuser043FE7E4
  RestApiDeploymentStageprod3855DE66:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId:
        Ref: RestApi0C43BF4B
      DeploymentId:
        Ref: RestApiDeployment180EC503e719aa128d3284dbb998d9b098ed5a1d
      StageName: prod
  RestApiOPTIONS6AA64D2D:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Fn::GetAtt:
          - RestApi0C43BF4B
          - RootResourceId
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApicontroller76BC0AA1:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - RestApi0C43BF4B
          - RootResourceId
      PathPart: controller
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApicontrollerOPTIONS5B608975:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApicontroller76BC0AA1
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApicontrollerid6888ED0C:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApicontroller76BC0AA1
      PathPart: "{id}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApicontrolleridOPTIONS020DD4DF:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApicontrollerid6888ED0C
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApicontrolleridframeCB9E3091:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApicontrollerid6888ED0C
      PathPart: frame
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApicontrolleridframeOPTIONSB4A74ACD:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApicontrolleridframeCB9E3091
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApicontrolleridframeGETApiPermissionagronomistserviceRestApiE3FCFC02GETcontrolleridframe55F6060E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerframefetcherFuncF1EDCC46
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/controller/*/frame
  RestApicontrolleridframeGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETcontrolleridframe8922BEC0:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerframefetcherFuncF1EDCC46
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/controller/*/frame
  RestApicontrolleridframeGET238CB2F4:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApicontrolleridframeCB9E3091
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicecontrollerframefetcherFuncF1EDCC46
                  - Arn
              - /invocations
  RestApiadmin3E3D47C6:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - RestApi0C43BF4B
          - RootResourceId
      PathPart: _admin
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminOPTIONSE83BC9A1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmin3E3D47C6
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmincontroller15E1F7F0:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmin3E3D47C6
      PathPart: controller
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadmincontrollerOPTIONS07FC8B9E:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmincontroller15E1F7F0
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmincontrolleridF9912E53:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmincontroller15E1F7F0
      PathPart: "{id}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadmincontrolleridOPTIONSEFD18D04:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmincontrolleridF9912E53
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmincontrolleridframeABEC85E2:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmincontrolleridF9912E53
      PathPart: frame
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadmincontrolleridframeOPTIONSA6F8D7FA:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmincontrolleridframeABEC85E2
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmincontrolleridframeGETApiPermissionagronomistserviceRestApiE3FCFC02GETadmincontrolleridframeC046C238:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerframefetcherFuncF1EDCC46
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/_admin/controller/*/frame
  RestApiadmincontrolleridframeGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETadmincontrolleridframe7779A173:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerframefetcherFuncF1EDCC46
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/_admin/controller/*/frame
  RestApiadmincontrolleridframeGET611F2819:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApiadmincontrolleridframeABEC85E2
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicecontrollerframefetcherFuncF1EDCC46
                  - Arn
              - /invocations
  RestApiadminpolicy6DA57A4C:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmin3E3D47C6
      PathPart: policy
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminpolicyOPTIONS6F360C1F:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadminpolicy6DA57A4C
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadminpolicycontroller0B621B6B:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadminpolicy6DA57A4C
      PathPart: controller
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminpolicycontrollerOPTIONSA8F847D7:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadminpolicycontroller0B621B6B
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadminpolicycontrolleridC3479CB6:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadminpolicycontroller0B621B6B
      PathPart: "{id}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminpolicycontrolleridOPTIONS3B13FAAE:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadminpolicycontrolleridC3479CB6
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadminpolicycontrolleridGETApiPermissionagronomistserviceRestApiE3FCFC02GETadminpolicycontrolleridABEF2572:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/_admin/policy/controller/*
  RestApiadminpolicycontrolleridGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETadminpolicycontrollerid47495077:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/_admin/policy/controller/*
  RestApiadminpolicycontrolleridGETD2CA5640:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApiadminpolicycontrolleridC3479CB6
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
                  - Arn
              - /invocations
  RestApiadminpolicycontrolleridPOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTadminpolicycontrollerid85A76DBB:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyupdaterFuncEDF71020
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/_admin/policy/controller/*
  RestApiadminpolicycontrolleridPOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTadminpolicycontrollerid39AF9F04:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyupdaterFuncEDF71020
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/_admin/policy/controller/*
  RestApiadminpolicycontrolleridPOSTFD906FC8:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApiadminpolicycontrolleridC3479CB6
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicecontrollerpolicyupdaterFuncEDF71020
                  - Arn
              - /invocations
  RestApiadminpolicyglobal20A9298A:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadminpolicy6DA57A4C
      PathPart: global
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminpolicyglobalOPTIONSA25C2264:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadminpolicyglobal20A9298A
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadminpolicyglobaldeviceType86AA2248:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadminpolicyglobal20A9298A
      PathPart: "{deviceType}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminpolicyglobaldeviceTypeOPTIONS399ABCA6:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadminpolicyglobaldeviceType86AA2248
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadminpolicyglobaldeviceTypeGETApiPermissionagronomistserviceRestApiE3FCFC02GETadminpolicyglobaldeviceType2E4A08A8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyfetcherFunc70FD1750
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/_admin/policy/global/*
  RestApiadminpolicyglobaldeviceTypeGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETadminpolicyglobaldeviceType8BC13E9A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyfetcherFunc70FD1750
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/_admin/policy/global/*
  RestApiadminpolicyglobaldeviceTypeGET3698EAED:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApiadminpolicyglobaldeviceType86AA2248
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistserviceglobalpolicyfetcherFunc70FD1750
                  - Arn
              - /invocations
  RestApiadminpolicyglobaldeviceTypePOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTadminpolicyglobaldeviceType7F47D1F6:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyupdaterFuncA73BC0E0
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/_admin/policy/global/*
  RestApiadminpolicyglobaldeviceTypePOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTadminpolicyglobaldeviceTypeADFDD881:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyupdaterFuncA73BC0E0
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/_admin/policy/global/*
  RestApiadminpolicyglobaldeviceTypePOST306371A7:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApiadminpolicyglobaldeviceType86AA2248
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistserviceglobalpolicyupdaterFuncA73BC0E0
                  - Arn
              - /invocations
  RestApiadmindeviceC27ACE95:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmin3E3D47C6
      PathPart: device
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadmindeviceOPTIONS85CE2590:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmindeviceC27ACE95
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmindeviceid99A54DAD:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmindeviceC27ACE95
      PathPart: "{id}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadmindeviceidOPTIONS2C9A4A3A:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmindeviceid99A54DAD
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmindeviceidconfig01DE198B:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmindeviceid99A54DAD
      PathPart: config
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadmindeviceidconfigOPTIONS6C5AB423:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmindeviceidconfig01DE198B
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmindeviceidconfigGETApiPermissionagronomistserviceRestApiE3FCFC02GETadmindeviceidconfig11106834:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceconfigfetcherFuncA88DC830
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/_admin/device/*/config
  RestApiadmindeviceidconfigGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETadmindeviceidconfigD397CAE5:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceconfigfetcherFuncA88DC830
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/_admin/device/*/config
  RestApiadmindeviceidconfigGET5BE5E473:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApiadmindeviceidconfig01DE198B
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedeviceconfigfetcherFuncA88DC830
                  - Arn
              - /invocations
  RestApiadmindeviceideventCE3013CC:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmindeviceid99A54DAD
      PathPart: event
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadmindeviceideventOPTIONS82C9DD74:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadmindeviceideventCE3013CC
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadmindeviceideventPOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTadmindeviceidevent2C4DB09C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventdispatcherFuncB528DA2A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/_admin/device/*/event
  RestApiadmindeviceideventPOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTadmindeviceidevent0651E09B:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventdispatcherFuncB528DA2A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/_admin/device/*/event
  RestApiadmindeviceideventPOSTDCA58E79:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApiadmindeviceideventCE3013CC
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedeviceeventdispatcherFuncB528DA2A
                  - Arn
              - /invocations
  RestApiadmindeviceideventGETApiPermissionagronomistserviceRestApiE3FCFC02GETadmindeviceideventAA721C28:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventfetcherFunc775FE6EC
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/_admin/device/*/event
  RestApiadmindeviceideventGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETadmindeviceideventCC7977C4:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventfetcherFunc775FE6EC
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/_admin/device/*/event
  RestApiadmindeviceideventGET0A065406:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApiadmindeviceideventCE3013CC
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedeviceeventfetcherFunc775FE6EC
                  - Arn
              - /invocations
  RestApiadmindeviceGETApiPermissionagronomistserviceRestApiE3FCFC02GETadmindevice523569ED:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedevicedescriptorfetcherFuncC95198A2
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/_admin/device
  RestApiadmindeviceGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETadmindeviceFAFBA4C8:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedevicedescriptorfetcherFuncC95198A2
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/_admin/device
  RestApiadmindeviceGET0649C25B:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApiadmindeviceC27ACE95
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedevicedescriptorfetcherFuncC95198A2
                  - Arn
              - /invocations
  RestApiadminuser73C98D70:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadmin3E3D47C6
      PathPart: user
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminuserOPTIONS94964CC1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadminuser73C98D70
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadminuserpostsignin431D0C2C:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiadminuser73C98D70
      PathPart: post-sign-in
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiadminuserpostsigninOPTIONSD638CE5B:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiadminuserpostsignin431D0C2C
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiadminuserpostsigninPOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTadminuserpostsignin4A75BE4A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceuserpostsigninFunc0BBC11E9
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/_admin/user/post-sign-in
  RestApiadminuserpostsigninPOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTadminuserpostsignin88B3018A:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceuserpostsigninFunc0BBC11E9
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/_admin/user/post-sign-in
  RestApiadminuserpostsigninPOSTAA3267D2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApiadminuserpostsignin431D0C2C
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: AWS_IAM
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistserviceuserpostsigninFunc0BBC11E9
                  - Arn
              - /invocations
  RestApipolicy5BEF8CF9:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - RestApi0C43BF4B
          - RootResourceId
      PathPart: policy
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApipolicyOPTIONSB82849AF:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApipolicy5BEF8CF9
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApipolicycontroller1011DBCE:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApipolicy5BEF8CF9
      PathPart: controller
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApipolicycontrollerOPTIONSE80C462D:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApipolicycontroller1011DBCE
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApipolicycontrolleridC600389B:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApipolicycontroller1011DBCE
      PathPart: "{id}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApipolicycontrolleridOPTIONSCCB5DE35:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApipolicycontrolleridC600389B
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApipolicycontrolleridGETApiPermissionagronomistserviceRestApiE3FCFC02GETpolicycontrollerid4715509C:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/policy/controller/*
  RestApipolicycontrolleridGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETpolicycontrolleridEA2C6EF9:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/policy/controller/*
  RestApipolicycontrolleridGET6B0C6F6E:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApipolicycontrolleridC600389B
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicecontrollerpolicyfetcherFuncA2AC0FD4
                  - Arn
              - /invocations
  RestApipolicycontrolleridPOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTpolicycontrolleridD0D31BDE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyupdaterFuncEDF71020
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/policy/controller/*
  RestApipolicycontrolleridPOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTpolicycontrolleridA0F02656:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicecontrollerpolicyupdaterFuncEDF71020
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/policy/controller/*
  RestApipolicycontrolleridPOST84EFEA71:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApipolicycontrolleridC600389B
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicecontrollerpolicyupdaterFuncEDF71020
                  - Arn
              - /invocations
  RestApipolicyglobal7E42F925:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApipolicy5BEF8CF9
      PathPart: global
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApipolicyglobalOPTIONS575774D1:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApipolicyglobal7E42F925
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApipolicyglobaldeviceType29BEBAD6:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApipolicyglobal7E42F925
      PathPart: "{deviceType}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApipolicyglobaldeviceTypeOPTIONS2A5D4E10:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApipolicyglobaldeviceType29BEBAD6
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApipolicyglobaldeviceTypeGETApiPermissionagronomistserviceRestApiE3FCFC02GETpolicyglobaldeviceType716314FD:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyfetcherFunc70FD1750
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/policy/global/*
  RestApipolicyglobaldeviceTypeGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETpolicyglobaldeviceTypeECBDB3E9:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyfetcherFunc70FD1750
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/policy/global/*
  RestApipolicyglobaldeviceTypeGETDE2C31DB:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApipolicyglobaldeviceType29BEBAD6
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistserviceglobalpolicyfetcherFunc70FD1750
                  - Arn
              - /invocations
  RestApipolicyglobaldeviceTypePOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTpolicyglobaldeviceType5E395BDF:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyupdaterFuncA73BC0E0
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/policy/global/*
  RestApipolicyglobaldeviceTypePOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTpolicyglobaldeviceType70B41C0D:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceglobalpolicyupdaterFuncA73BC0E0
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/policy/global/*
  RestApipolicyglobaldeviceTypePOST9B93500D:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApipolicyglobaldeviceType29BEBAD6
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistserviceglobalpolicyupdaterFuncA73BC0E0
                  - Arn
              - /invocations
  RestApidevice34312178:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - RestApi0C43BF4B
          - RootResourceId
      PathPart: device
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApideviceOPTIONS6B6BBE7F:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApidevice34312178
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApideviceid267F3870:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApidevice34312178
      PathPart: "{id}"
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApideviceidOPTIONS892CC2A2:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApideviceid267F3870
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApideviceidconfig816D3F04:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApideviceid267F3870
      PathPart: config
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApideviceidconfigOPTIONS39B6C7C8:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApideviceidconfig816D3F04
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApideviceidconfigGETApiPermissionagronomistserviceRestApiE3FCFC02GETdeviceidconfig741AC6FC:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceconfigfetcherFuncA88DC830
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/device/*/config
  RestApideviceidconfigGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETdeviceidconfigF52A72AF:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceconfigfetcherFuncA88DC830
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/device/*/config
  RestApideviceidconfigGET533D1A40:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApideviceidconfig816D3F04
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedeviceconfigfetcherFuncA88DC830
                  - Arn
              - /invocations
  RestApideviceidevent47285C93:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApideviceid267F3870
      PathPart: event
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApideviceideventOPTIONSD4CDBD0C:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApideviceidevent47285C93
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApideviceideventPOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTdeviceidevent2B8E4B20:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventdispatcherFuncB528DA2A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/device/*/event
  RestApideviceideventPOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTdeviceideventF601AD40:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventdispatcherFuncB528DA2A
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/device/*/event
  RestApideviceideventPOST251ECCD9:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApideviceidevent47285C93
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedeviceeventdispatcherFuncB528DA2A
                  - Arn
              - /invocations
  RestApideviceideventGETApiPermissionagronomistserviceRestApiE3FCFC02GETdeviceidevent35CCC1AE:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventfetcherFunc775FE6EC
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/device/*/event
  RestApideviceideventGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETdeviceidevent352C2E09:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedeviceeventfetcherFunc775FE6EC
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/device/*/event
  RestApideviceideventGET143EB058:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApideviceidevent47285C93
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedeviceeventfetcherFunc775FE6EC
                  - Arn
              - /invocations
  RestApideviceGETApiPermissionagronomistserviceRestApiE3FCFC02GETdevice36C1D48E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedevicedescriptorfetcherFuncC95198A2
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /GET/device
  RestApideviceGETApiPermissionTestagronomistserviceRestApiE3FCFC02GETdeviceA611CE89:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistservicedevicedescriptorfetcherFuncC95198A2
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/GET/device
  RestApideviceGET5CE59708:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId:
        Ref: RestApidevice34312178
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistservicedevicedescriptorfetcherFuncC95198A2
                  - Arn
              - /invocations
  RestApiuser043FE7E4:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt:
          - RestApi0C43BF4B
          - RootResourceId
      PathPart: user
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiuserOPTIONS772D24FD:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiuser043FE7E4
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiuserpostsigninE73B6278:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Ref: RestApiuser043FE7E4
      PathPart: post-sign-in
      RestApiId:
        Ref: RestApi0C43BF4B
  RestApiuserpostsigninOPTIONS910196FC:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        Ref: RestApiuserpostsigninE73B6278
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: NONE
      Integration:
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,Accept,User-Agent,Referer'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'"
            StatusCode: "204"
        RequestTemplates:
          application/json: "{ statusCode: 200 }"
        Type: MOCK
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
          StatusCode: "204"
  RestApiuserpostsigninPOSTApiPermissionagronomistserviceRestApiE3FCFC02POSTuserpostsignin48A3864B:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceuserpostsigninFunc0BBC11E9
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /
            - Ref: RestApiDeploymentStageprod3855DE66
            - /POST/user/post-sign-in
  RestApiuserpostsigninPOSTApiPermissionTestagronomistserviceRestApiE3FCFC02POSTuserpostsigninDBE049B7:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - agronomistserviceuserpostsigninFunc0BBC11E9
          - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:"
            - Ref: AWS::Partition
            - ":execute-api:"
            - Ref: AWS::Region
            - ":"
            - Ref: AWS::AccountId
            - ":"
            - Ref: RestApi0C43BF4B
            - /test-invoke-stage/POST/user/post-sign-in
  RestApiuserpostsigninPOST1001B286:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId:
        Ref: RestApiuserpostsigninE73B6278
      RestApiId:
        Ref: RestApi0C43BF4B
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId:
        Ref: serviceCognitoAuthorizer016061C3
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - ":apigateway:"
              - Ref: AWS::Region
              - :lambda:path/2015-03-31/functions/
              - Fn::GetAtt:
                  - agronomistserviceuserpostsigninFunc0BBC11E9
                  - Arn
              - /invocations
Outputs:
  RestApiEndpoint0551178A:
    Value:
      Fn::Join:
        - ""
        - - https://
          - Ref: RestApi0C43BF4B
          - .execute-api.
          - Ref: AWS::Region
          - "."
          - Ref: AWS::URLSuffix
          - /
          - Ref: RestApiDeploymentStageprod3855DE66
          - /

