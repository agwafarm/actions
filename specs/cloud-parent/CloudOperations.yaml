AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Operation related modules

Parameters:

  Environment:
    Type: String

  LambdaPrefix:
    Type: String

  LayerPrefix:
    Type: String

  CommonLayer:
    Type: String

  ArtifactsBucket:
    Type: String

  LambdaRole:
    Type: String

  NotificationsSns:
    Type: String

Conditions:
  isProduction: !Equals [!Ref Environment, "prod"]

Resources:

  PodsDeliveryReportsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-pods-delivery-reports"

  PodsDeliveryReporterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_pods_delivery_reporter"
      Description: An ETL for pods delivery report distribution.
      Handler: pods_delivery_reporter.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/pods_delivery_reporter.zip"
      Layers:
        - !Ref CommonLayer
      Timeout: 300
      Environment:
        Variables:
          ENV: !Ref Environment
          REPORTS_BUCKET: !Ref PodsDeliveryReportsBucket
          LOCAL_FILE_SYSTEM: "/tmp"
          RECIPIENTS: "gilad@agwafarm.com,maayan@agwafarm.com"

  PodsDeliveryReporterAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-pods-delivery-reporter-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref PodsDeliveryReporterFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  PodsDeliveryReporterTimer:
    Condition: isProduction
    Type: AWS::Events::Rule
    Properties:
      Description: Periodically distribute pods delivery report to recipients
      Name: !Sub "${Environment}_pods_delivery_reporter_event"
      ScheduleExpression: "cron(0 6 1 * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt PodsDeliveryReporterFunction.Arn
          Id: !Ref PodsDeliveryReporterFunction

  PodsDeliveryReporterTimerAlarm:
    Condition: isProduction
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-pods-delivery-reporter-timer-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: FailedInvocations
      Namespace: AWS/Events
      Dimensions:
        - Name: RuleName
          Value: !Ref PodsDeliveryReporterTimer
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  PodsDeliveryReporterPermissionInvokeLambdaRule:
    Condition: isProduction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PodsDeliveryReporterFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt PodsDeliveryReporterTimer.Arn


  TunnelCleanerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_tunnel_cleaner"
      Description: An ETL for cleaning old tunnels.
      Handler: tunnel_cleaner.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/tunnel_cleaner.zip"
      Layers:
        - !Ref CommonLayer
      Timeout: 300
      Environment:
        Variables:
          ENV: !Ref Environment

  TunnelCleanerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-tunnel-cleaner-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref TunnelCleanerFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  TunnelCleanerTimer:
    Type: AWS::Events::Rule
    Properties:
      Description: Periodically clean old tunnels
      Name: !Sub "${Environment}_tunnel_cleaner_event"
      ScheduleExpression: "cron(0 10,22 * * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt TunnelCleanerFunction.Arn
          Id: !Ref TunnelCleanerFunction

  TunnelCleanerTimerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-tunnel-cleaner-timer-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: FailedInvocations
      Namespace: AWS/Events
      Dimensions:
        - Name: RuleName
          Value: !Ref TunnelCleanerTimer
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  TunnelCleanerPermissionInvokeLambdaRule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref TunnelCleanerFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt TunnelCleanerTimer.Arn

  ShipmentUpdateNotifierFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_shipment_update_notifier"
      Description: An ETL to remind users to update their shipment preference
      Handler: shipment_update_notifier.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/shipment_update_notifier.zip"
      Layers:
        - !Ref CommonLayer
      Timeout: 300
      Environment:
        Variables:
          ENV: !Ref Environment

  ShipmentUpdateNotifierAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-shipment-update-notifier-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref ShipmentUpdateNotifierFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  ShipmentUpdateNotifierTimer:
    Condition: isProduction
    Type: AWS::Events::Rule
    Properties:
      Description: Periodically remind users to update their shipment preference
      Name: !Sub "${Environment}_shipment_update_notifier_event"
      ScheduleExpression: "cron(0 0 25 * ? *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt ShipmentUpdateNotifierFunction.Arn
          Id: !Ref ShipmentUpdateNotifierFunction

  ShipmentUpdateNotifierTimerAlarm:
    Condition: isProduction
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-shipment-update-notifier-timer-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: FailedInvocations
      Namespace: AWS/Events
      Dimensions:
        - Name: RuleName
          Value: !Ref ShipmentUpdateNotifierTimer
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  ShipmentUpdateNotifierPermissionInvokeLambdaRule:
    Condition: isProduction
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ShipmentUpdateNotifierFunction
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ShipmentUpdateNotifierTimer.Arn