AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Build cloud environment

Parameters:

  Environment:
    Type: String

  TemplateUrlPrefix:
    Type: String

  LambdaPrefix:
    Type: String

  LayerPrefix:
    Type: String

  ArtifactsBucket:
    Type: String

  ServiceName:
    Type: String

  CompanyName:
    Type: String

Resources:
  CommonLayer:  
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.8
      Content: 
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Sub "${LayerPrefix}/cloud-common.zip"
      Description: Common Lambda Dependencies
      LayerName: !Sub "${Environment}_cloud_common_layer"

  CloudLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Description: General cloud lambda policy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
        - arn:aws:iam::aws:policy/AWSIoTFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
        - arn:aws:iam::aws:policy/AmazonAthenaFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
      Policies:
        - PolicyName: LambdaLogsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: PassIAMRole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: "*"
        - PolicyName: PublishSnsPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: "*"
        - PolicyName: allowSqs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:*
                Resource: "*"
        - PolicyName: allowSts
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
             - Effect: Allow
               Action:
                 - sts:*
               Resource: "*"
        - PolicyName: allowSes
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: "*"
        - PolicyName: allowCognito
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
             - Effect: Allow
               Action:
                 - cognito-identity:*
               Resource: "*"
             - Effect: Allow
               Action:
                  - cognito-idp:*
               Resource: "*"

  SlackNotificationsLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_slack_error_notifications"
      Description: A lambda function that gets error notifications from SNS topic and sends over to Slack channel.
      Handler: slack_error_notifications.lambda_handler
      Role: !GetAtt CloudLambdaRole.Arn
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/slack_error_notifications.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  NotificationsSns:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub "${Environment}-errors-notifications-alerts"
      Subscription:
        - Endpoint: !GetAtt SlackNotificationsLambda.Arn
          Protocol: lambda
      TopicName: !Sub "${Environment}-errors-notifications-alerts"
  
  ErrorsNotificationSnsParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "${Environment}-errors-notifications-alerts"
      Type: String
      Value: !Ref NotificationsSns
      Description: SSM Parameter for storing SNS channel for error notifications.
      Tags:
        Environment: !Sub ${Environment}

  NotificationsSnsPermissionInvokeLambdaRule:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SlackNotificationsLambda
      Action: "lambda:InvokeFunction"
      Principal: "sns.amazonaws.com"
      SourceArn: !Ref NotificationsSns

  CloudDataStreaming:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment: !Ref Environment
        ArtifactsBucket: !Ref ArtifactsBucket
        LambdaRole: !GetAtt CloudLambdaRole.Arn
        NotificationsSns: !Ref NotificationsSns
        CommonLayer: !Ref CommonLayer
        LambdaPrefix: !Ref LambdaPrefix
        LayerPrefix: !Ref LayerPrefix
      TemplateURL: !Sub '${TemplateUrlPrefix}/CloudDataStreaming.yaml'

  CloudAPIs:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment: !Ref Environment
        ArtifactsBucket: !Ref ArtifactsBucket
        LambdaRole: !GetAtt CloudLambdaRole.Arn
        NotificationsSns: !Ref NotificationsSns
        CommonLayer: !Ref CommonLayer
        LambdaPrefix: !Ref LambdaPrefix
        LayerPrefix: !Ref LayerPrefix
      TemplateURL: !Sub '${TemplateUrlPrefix}/CloudAPIs.yaml'

  CloudOperations:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Environment: !Ref Environment
        ArtifactsBucket: !Ref ArtifactsBucket
        LambdaRole: !GetAtt CloudLambdaRole.Arn
        NotificationsSns: !Ref NotificationsSns
        CommonLayer: !Ref CommonLayer
        LambdaPrefix: !Ref LambdaPrefix
        LayerPrefix: !Ref LayerPrefix
      TemplateURL: !Sub '${TemplateUrlPrefix}/CloudOperations.yaml'

  UserOffboarding:
    Type: AWS::CloudFormation::Stack
    DependsOn: CloudAPIs
    Properties:
      Parameters:
        Environment: !Ref Environment
        ArtifactsBucket: !Ref ArtifactsBucket
        LambdaRole: !GetAtt CloudLambdaRole.Arn
        NotificationsSns: !Ref NotificationsSns
        CommonLayer: !Ref CommonLayer
        LambdaPrefix: !Ref LambdaPrefix
        LayerPrefix: !Ref LayerPrefix
      TemplateURL: !Sub '${TemplateUrlPrefix}/UserOffboarding.yaml'

Outputs:
  NotificationsSns:
    Description: The Arn of the notifications SNS for the env.
    Value: !Ref NotificationsSns
    Export:
      Name: !Sub "${Environment}-NotificationsSns"
