AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Deploy Agwa API endpoints

Parameters:
  Environment:
    Type: String

  CommonLayer:
    Type: String

  ArtifactsBucket:
    Type: String

  LambdaPrefix:
    Type: String

  LayerPrefix:
    Type: String

  LambdaRole:
    Type: String

  NotificationsSns:
    Type: String

Resources:

  DeviceCertificatesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-device-certificates"
  
  DeviceCertificateBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/infra/${Environment}/buckets/device-certificates"
      Type: String
      Value: !Ref DeviceCertificatesBucket
      Description: !Sub "The device certificate bucket in the ${Environment} env."

  ControllerManagementFunctionParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/infra/${Environment}/functions/controller-management"
      Type: String
      Value: !Ref ControllerManamgenetFunction
      Description: !Sub "The controller management function in the ${Environment} env."

  GrowerUserPoolParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/infra/${Environment}/auth/cognito/user-pool/id/grower-service"
      Type: String
      Value: !Ref AgwaUserPool
      Description: !Sub "The cognito user pool id for the grower app in the ${Environment} env."

  AgwaUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailMessage: !Sub '<html>
                                <head>
                                    <style>
                                        .vegpic { width: calc(50% - 38px); margin-left: 15px; margin-right: 15px;}
                                        @media (max-width: 600px) {
                                            .vegpic { width: 50%; margin-top: 10px; margin-bottom: 10px;}
                                        }
                                        .title { font-size: 24px;}
                                        @media (max-width: 600px) {
                                            .title { font-size: 20px;}
                                        }
                                        .content { font-size: 18px; padding-bottom: 25px;}
                                        @media (max-width: 600px) {
                                            .content { font-size: 18px; padding-bottom: 25px;}
                                        }
                                        .frame { padding-left: 80px; padding-right: 80px;}
                                        @media (max-width: 600px) {
                                            .frame { padding-left: 20px; padding-right: 20px; }
                                        }
                                    </style>
                                </head>
                                <body>
                                    <div
                                        style="font-family: times new roman,serif; background-color: #efe8d8; width: 100%; max-width: none; min-height: 100vh; margin: auto; padding-top: 40px; padding-bottom: 40px; text-align: center; padding-left: 10px; padding-right: 10px;">
                                        <div
                                            style="background-color: rgba(255,255,255,1); border-width: 0px; border-radius: 2px; opacity: 1; border-color: #ebebed; position: relative;
                                                    box-sizing: border-box; position: relative; margin: 0 auto; padding-top: 25px; padding-bottom: 25px; max-width: 700px;" class="frame">
                                            <a style="text-align: center;" href="https://www.agwafarm.com"> <img style="max-height: 200px"
                                                    src="https://${Environment}-agwa-public-static-assets-web.s3.us-west-2.amazonaws.com/images/welcome_email/agwa_logo_long.png" />
                                            </a>
                                            <div
                                                style="word-break: break-word; word-wrap: break-word; font-family: helvetica,sans-serif; letter-spacing: 0; line-height: 1.3; font-weight: bold; padding-bottom: 10px;">
                                                <p class="title"><span>Welcome to your new life...</span></p>
                                            </div>
                                            <div>
                                                <p style="word-break: break-word; word-wrap: break-word; line-height: 1.5; padding-top: 15px; text-align: left;">
                                                    <span class="content">
                                                        where vegetables are super fresh, full of nutritions and chemical free.
                                                        Your very own Farm-to-Table experience in your house. Effortless gardening with low ecological footprint and no food waste.
                                                    </span>
                                                </p>
                                            </div>
                                            <div style=" padding-top: 30px; padding-bottom: 25px; justify-content: space-between; margin: 0;">
                                                <img class="vegpic" src="https://${Environment}-agwa-public-static-assets-web.s3.us-west-2.amazonaws.com/images/welcome_email/left.jpg" />
                                                <img class="vegpic" src="https://${Environment}-agwa-public-static-assets-web.s3.us-west-2.amazonaws.com/images/welcome_email/right.jpg" />
                                            </div>
                                            <div>
                                                <p style="word-break: break-word; word-wrap: break-word; line-height: 1.5; padding-top: 25px; text-align: left; margin: 0" class="content">
                                                    <span>
                                                        To maximize your experience with your AgwaGarden, set it up
                                                        as it arrives and enable us to let you know about everything we think is important,
                                                        please&nbsp;download our <span style="font-weight:bold">mobile app</span>, using one of the
                                                        links below.<br><br>Username: {username}
                                                    </span>
                                                </p>
                                            </div>
                                            <p>
                                                <a href="https://play.google.com/store/apps/details?id=com.agwafarmmobileapp&amp;pcampaignid=pcampaignidMKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1">
                                                    <img
                                                        style="border-radius: 13px; width: 150px;"
                                                        src="https://play.google.com/intl/en_us/badges/static/images/badges/en_badge_web_generic.png"
                                                        alt="Get it on Google Play" />
                                                </a>
                                                <a href="https://apps.apple.com/us/app/agwafarm/id1553904048?itsct=apps_box&amp;itscg=30200">
                                                    <img
                                                        style="border-radius: 13px; width: 135px; height: 39px; padding: 10px;"
                                                        src="https://agwa-website-documents.s3-us-west-2.amazonaws.com/ios_download.png"
                                                        alt="Download on the App Store Badge PNG icon" />
                                                </a>
                                            </p>
                                            <img src="https://${Environment}-agwa-public-static-assets-web.s3.us-west-2.amazonaws.com/images/welcome_email/footer.jpg">
                                        </div>
                                        <div style="display:none">{####}</div>
                                    </div>
                                </body>
                            </html>'
          EmailSubject: "Welcome to Agwa! ðŸŒ±"
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: Agwa Team <team@agwafarm.com>
        ReplyToEmailAddress: team@agwafarm.com
        SourceArn: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/team@agwafarm.com
      EmailVerificationMessage: "Your email verification code is {####}. "
      EmailVerificationSubject: "AgwaFarm verification code"
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          TemporaryPasswordValidityDays: 90
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: email_verified
          AttributeDataType: Boolean
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
        - Name: updated_at
          AttributeDataType: Number
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          NumberAttributeConstraints:
            MinValue: "0"
      UsernameAttributes:
        - email
      UserPoolName: !Sub "${Environment}-agwa"
      VerificationMessageTemplate:
        EmailMessage: "Your email verification code is {####}. "
        EmailSubject: "AgwaFarm verification code"
        EmailMessageByLink: "Please click the link below to verify your email address. {##Verify Email##} "
        EmailSubjectByLink: "Your verification link"
        DefaultEmailOption: "CONFIRM_WITH_CODE"
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallengeFunction.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallengeFunction.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeFunction.Arn

  CreateAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CreateAuthChallengeFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt AgwaUserPool.Arn

  VerifyAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt VerifyAuthChallengeFunction.Arn
      Principal: cognito-idp.amazonaws.com

  DefineAuthChallengeInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DefineAuthChallengeFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt AgwaUserPool.Arn

  CreateAuthChallengeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_cognito_create_auth_challenge"
      Description: Get the environment registered greenhouses.
      Handler: cognito_create_auth_challenge.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/cognito_create_auth_challenge.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          STATIC_EMAILS: '["demo@agwafarm.com"]'
          STATIC_CODE: "555555"
      Timeout: 300

  CreateAuthChallengeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-create-auth-challenge-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref CreateAuthChallengeFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  DefineAuthChallengeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_cognito_define_auth_challenge"
      Description: Get the environment registered greenhouses.
      Handler: cognito_define_auth_challenge.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/cognito_define_auth_challenge.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 300

  DefineAuthChallengeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-define-auth-challenge-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref DefineAuthChallengeFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  VerifyAuthChallengeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_cognito_verify_auth_challenge"
      Description: Get the environment registered greenhouses.
      Handler: cognito_verify_auth_challenge.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/cognito_verify_auth_challenge.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 300

  VerifyAuthChallengeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-verify-auth-challenge-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref VerifyAuthChallengeFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  AgwaUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AgwaUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_CUSTOM_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH

  TempCameraFramesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-agwa-temp-camera-frames"
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 10
            Status: Enabled

  TempCameraFramesBucketParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Environment}/cloud_components/resource/bucket/agwa-temp-camera-frames-bucket"
      Type: String
      Value: !Ref TempCameraFramesBucket
      Description: !Sub "The temp camera frame bucket for ${Environment} env."

  AgwaTechnicianApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-agwa-technician-api"
      StageName: !Ref Environment
      Auth:
        Authorizers:
          AgwaTechnicianApiAuthorizer:
            UserPoolArn: !GetAtt AgwaTechnicianPool.Arn

  AgwaTechnicianApiGatewayIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${Environment}/cloud_components/resource/agwa_technician_api_gateway_id"
      Type: String
      Value: !Ref AgwaTechnicianApiGateway
      Description: !Sub "The technician api id for ${Environment} env."

  TechnicianApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-technician-api-5xx-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value: !Sub "${Environment}-agwa-technician-api"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  AgwaTechnicianPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: "Your username is {username} and temporary password is {####}. "
          EmailSubject: "Your temporary password"
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      EmailVerificationMessage: "Your email verification code is {####}. "
      EmailVerificationSubject: "AgwaFarm verification code"
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: email
          AttributeDataType: String
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: true
          StringAttributeConstraints:
            MinLength: "0"
            MaxLength: "2048"
        - Name: email_verified
          AttributeDataType: Boolean
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
        - Name: updated_at
          AttributeDataType: Number
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
          NumberAttributeConstraints:
            MinValue: "0"
        - Name: iot_policy_attached
          AttributeDataType: Boolean
          DeveloperOnlyAttribute: false
          Mutable: true
          Required: false
      UsernameAttributes:
        - email
      UserPoolName: !Sub "${Environment}-agwa-technician-user-pool"
      VerificationMessageTemplate:
        EmailMessage: "Your email verification code is {####}. "
        EmailSubject: "AgwaFarm verification code"
        EmailMessageByLink: "Please click the link below to verify your email address. {##Verify Email##} "
        EmailSubjectByLink: "Your verification link"
        DefaultEmailOption: "CONFIRM_WITH_CODE"

  TechnicianUserPostAuthenticationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_technician_user_post_authentication"
      Description: A lambda function that is triggered upon technician user authentication to manage permissions.
      Handler: technician_user_post_authentication.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /bootstrap
            Method: POST
            RestApiId:
              Ref: AgwaTechnicianApiGateway
            Auth:
              Authorizer: AgwaTechnicianApiAuthorizer
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/technician_user_post_authentication.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          IOT_POLICY_NAME: !Ref AgwaTechnicianUserIotPolicy
          USER_POOL_ID: !Ref AgwaTechnicianPool

  GreenhousesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse
            Method: GET
            RestApiId:
              Ref: AgwaTechnicianApiGateway
            Auth:
              Authorizer: AgwaTechnicianApiAuthorizer
      FunctionName: !Sub "${Environment}_greenhouses"
      Description: Get the environment registered greenhouses.
      Handler: greenhouses.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/greenhouses.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  GreenhousesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-greenhouses-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref GreenhousesFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  AgwaTechnicianUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref AgwaTechnicianPool
      GenerateSecret: false

  AgwaTechnicianUserIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowClassicFlow: true
      AllowUnauthenticatedIdentities: false
      IdentityPoolName: !Sub "${Environment}-agwa-technician-user-identity-pool"
      CognitoIdentityProviders:
        - ClientId: !Ref AgwaTechnicianUserPoolClient
          ProviderName: !GetAtt AgwaTechnicianPool.ProviderName
          ServerSideTokenCheck: false

  AgwaTechnicianUserIdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref AgwaTechnicianUserIdentityPool
      Roles:
        authenticated: !GetAtt AgwaAuthenticatedTechnicianUserRole.Arn

  AgwaAuthenticatedTechnicianUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Federated:
                - cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref AgwaTechnicianUserIdentityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
      Policies:
        - PolicyName: !Sub "AuthenticatedTechnicianPolicy_${Environment}"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-identity:*
                Resource: "*"
        - PolicyName: !Sub "${Environment}_TechnicianTempCameraPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject*'
                  - 's3:GetBucket*'
                  - 's3:List*'
                Resource:
                  - !Join [ "", [ "arn:aws:s3:::", Ref: "TempCameraFramesBucket", "/*" ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSIoTConfigAccess
        - arn:aws:iam::aws:policy/AWSIoTDataAccess

  AgwaTechnicianUserIotPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub "${Environment}AgwaTechnicianUserIoTPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iot:*
            Resource: "*"

  AgwaApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-agwa-api"
      StageName: !Ref Environment
      Auth:
        Authorizers:
          AgwaApiAuthorizer:
            UserPoolArn: !GetAtt AgwaUserPool.Arn

  ApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-api-5xx-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Dimensions:
        - Name: ApiName
          Value: !Sub "${Environment}-agwa-api"
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  SSMServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ssm.amazonaws.com
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
      Path: "/"

  ControllerManamgenetFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}
            Method: ANY
            RestApiId:
              Ref: AgwaApiGateway
      FunctionName: !Sub "${Environment}_controller_management"
      Description: Manages the controller onboarding & offboarding.
      Handler: controller_management.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/controller_management.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          LOCAL_FILE_SYSTEM: "/tmp"
          CERTIFICATES_BUCKET: !Ref DeviceCertificatesBucket
          ENV: !Ref Environment
          HW_VERSION: "0.3"
      Timeout: 60
      ReservedConcurrentExecutions: 1 #TODO: CHANGE AS SOON AS POSSIBLE

  ControllerManagementAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-controller-management-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref ControllerManamgenetFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  SensorCalibrationManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ControllerApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/sensor/{sensor}/command/calibrate
            Method: POST
            RestApiId:
              Ref: AgwaApiGateway
        TechnicianApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/sensor/{sensor}/command/calibrate
            Method: POST
            RestApiId:
              Ref: AgwaTechnicianApiGateway
            Auth:
              Authorizer: AgwaTechnicianApiAuthorizer
      FunctionName: !Sub "${Environment}_sensor_calibration_manager"
      Description: Manages the sensor calibrations.
      Handler: sensor_calibration_manager.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/sensor_calibration_manager.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 90

  SensorCalibrationManagerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-sensor-clibration-manager-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref SensorCalibrationManagerFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  SensorDataCollectionManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ControllerApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/sensor/{sensor}/command/data-collection
            Method: POST
            RestApiId:
              Ref: AgwaApiGateway
        TechnicianApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/sensor/{sensor}/command/data-collection
            Method: POST
            RestApiId:
              Ref: AgwaTechnicianApiGateway
            Auth:
              Authorizer: AgwaTechnicianApiAuthorizer
      FunctionName: !Sub "${Environment}_sensor_data_collection_manager"
      Description: Manages the sensor data collection.
      Handler: sensor_data_collection_manager.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/sensor_data_collection_manager.zip"
      Layers:
        - !Ref CommonLayer
      Timeout: 90

  SensorDataCollectionManagerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-sensor-data-collection-manager-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref SensorDataCollectionManagerFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  DeviceTunnelingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/tunnel
            Method: ANY
            RestApiId:
              Ref: AgwaApiGateway
      FunctionName: !Sub "${Environment}_device_tunneling"
      Description: Manages device tunnels.
      Handler: tunnel_handler.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/device_tunneling.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          SSM_ROLE: !Ref SSMServiceRole
      Timeout: 30

  DeviceTunnelingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-device-tunneling-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeviceTunnelingFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  InstanceManagerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_instance_manager"
      Description: Add registered instance to database
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/instance_manager.zip"
      Layers:
        - !Ref CommonLayer
      Handler: instance_manager.lambda_handler
      Events:
        InstanceRegistered:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              {
                "source": ["aws.ssm"],
                "detail-type":
                  ["EC2 State Manager Instance Association State Change"],
              }
      Environment:
        Variables:
          DEACTIVATION_URL: !Sub "https://${AgwaApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/{controller_id}/tunnel"
          ENV: !Ref Environment
      Role: !Ref LambdaRole
      Runtime: python3.8
      Timeout: 30

  InstanceManagerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-instance-manager-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref InstanceManagerFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  UserGreenhousesV2Function:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /v2/user/{user_id}/greenhouses
            Method: GET
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_user_greenhouses_v2"
      Description: Get the user registered greenhouses.
      Handler: user_greenhouses_v2.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/user_greenhouses_v2.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  UserGreenhousesV2Alarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-user-greenhouses-v2-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserGreenhousesV2Function
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  RegisterGreenhouseFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/register
            Method: POST
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AWS_IAM
              InvokeRole: NONE
      FunctionName: !Sub "${Environment}_register_greenhouse"
      Description: Register a greenhouse for a user.
      Handler: register_greenhouse.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/register_greenhouse.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          CONTROLLER_MANAGEMENT_FUNCTION: !Ref ControllerManamgenetFunction
      Timeout: 30
 

  RegisterGreenhousesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-register-greenhouse-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref RegisterGreenhouseFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns
  
  RegisterGreenhouseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
       LogGroupName: 
         !Sub
           - /aws/lambda/${funcName}
           - {funcName: !Ref RegisterGreenhouseFunction}

  RegisterGreenhouseWarningMetric:
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName: !Ref RegisterGreenhouseLogGroup
      FilterPattern: "[WARNING]"
      MetricTransformations:
        - MetricValue: "1"
          DefaultValue: 0
          MetricNamespace: Agwa/Lambda
          MetricName: "RegisterGreenhouseLambdaWarningMetric"

  RegisterGreenhouseWarningAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-register-greenhouse-warning-log-alarm"
      AlarmDescription: Alert when warnings found on log
      AlarmActions:
        - !Ref NotificationsSns
      MetricName: "RegisterGreenhouseWarningMetric"
      Namespace: AWS/Lambda
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      Threshold: 1

  RegisterGreenhousesDeviceManagementInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ControllerManamgenetFunction
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !GetAtt RegisterGreenhouseFunction.Arn

  GreenhouseStatsHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        UserGreenhouseStatsApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/stats
            Method: GET
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
        TechnicianUserGreenhouseStatsApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/stats
            Method: ANY
            RestApiId:
              Ref: AgwaTechnicianApiGateway
            Auth:
              Authorizer: AgwaTechnicianApiAuthorizer
      FunctionName: !Sub "${Environment}_greenhouse_stats_handler"
      Description: Get the greenhouse latests measurements stats.
      Handler: greenhouse_stats_handler.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/greenhouse_stats_handler.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  GreenhouseStatsHandlerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-greenhouse-stats-handler-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref GreenhouseStatsHandlerFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  DeviceModuleAssociationFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        DeviceModuleAssociationEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/module
            Method: PUT
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_device_module_association_updater"
      Description: Associates modules with a device.
      Handler: device_module_association_updater.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/device_module_association_updater.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  DeviceModuleAssociationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-device-module-association-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeviceModuleAssociationFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  ModuleConfigurationHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ModuleConfigurationCreateEvent:
          Type: Api
          Properties:
            Path: /module/config/{name}
            Method: POST
            RestApiId:
              Ref: AgwaTechnicianApiGateway
        ModuleConfigurationUpdateEvent:
          Type: Api
          Properties:
            Path: /module/{id}/config/{name}
            Method: PUT
            RestApiId:
              Ref: AgwaTechnicianApiGateway
        ModuleconfigRetrivalEvent:
          Type: Api
          Properties:
            Path: /module/{id}/config/{name}
            Method: GET
            RestApiId:
              Ref: AgwaTechnicianApiGateway
      FunctionName: !Sub "${Environment}_module_configuration_handler"
      Description: Sets configuration values for modules
      Handler: module_configuration_handler.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/module_configuration_handler.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  ModuleConfigurationHandlerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-module-configuration-handler-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref ModuleConfigurationHandlerFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  PurchaseManagementEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt PurchaseManagementSqs.Arn
      FunctionName: !GetAtt PurchaseManagementFunction.Arn

  PurchaseManagementSqs:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: !Sub "${Environment}-purchase-management-queue"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt PurchaseManagementDeadLetterQueue.Arn
        maxReceiveCount: 3


  PurchaseManagementDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-purchase-management-dead-letter-queue"

  PurchaseManagementSQSQueueUnprocessedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-purchase-management-sqs-unprocessed"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: SQS
      Dimensions:
        - Name: QueueName
          Value: PurchaseManagementSqs
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  PurchaseManagementLayer:  
    Type: AWS::Lambda::LayerVersion
    Properties: 
      CompatibleRuntimes: 
        - python3.8
      Content: 
        S3Bucket: !Ref ArtifactsBucket
        S3Key: !Sub "${LayerPrefix}/purchase_management.zip"
      Description: Purchase Management Dependencies
      LayerName: !Sub "${Environment}_purchase_management_layer"

  PurchaseManagementFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_purchase_management"
      Description: A lambda function that gets user email and user plants selection from payment webhook to save data to database.
      Handler: purchase_management.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/purchase_management.zip"
      Layers:
        - !Ref CommonLayer
        - !Ref PurchaseManagementLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          USER_POOL_ID: !Ref AgwaUserPool
          DEVICE_PLANT_SELECTION_QUEUE_NAME: !GetAtt DevicePlantSelectionSqs.QueueName
          POST_PURCHASING_EMAIL: 'orders@agwafarm.com'
      Timeout: 30

  PurchaseManagementAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-purchase-management-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref PurchaseManagementFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  StripeWebHookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /stripe-webhook
            Method: POST
            RestApiId:
              Ref: AgwaApiGateway
      FunctionName: !Sub "${Environment}_stripe_webhook"
      Description: Handle stripe webhook events.
      Handler: stripe_webhook.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/stripe_webhook.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          PURCHASE_MANAGEMENT_QUEUE_NAME: !GetAtt PurchaseManagementSqs.QueueName
      Timeout: 30

  DevicePlantSelectionFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        UserPlantSelectionApiEvent:
          Type: Api
          Properties:
            Path: /device/{device_id}/shipment
            Method: ANY
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_device_plant_selection"
      Description: A lambda function that update plants selection.
      Handler: device_plant_selection.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/device_plant_selection.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  DevicePlantSelectionAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-device_plant_selection-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref DevicePlantSelectionFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  DevicePlantSelectionSqs:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: !Sub "${Environment}-device-plant-selection-queue"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DevicePlantSelectionDeadLetterQueue.Arn
        maxReceiveCount: 1

  DevicePlantSelectionDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-device-plant-selection-dead-letter-queue"

  UserPlantSelectionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt DevicePlantSelectionSqs.Arn
      FunctionName: !GetAtt DevicePlantSelectionFunction.Arn

  DevicePlantSelectionSQSQueueUnprocessedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-device-plant-selection-sqs-unprocessed"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: SQS
      Dimensions:
        - Name: QueueName
          Value: !Ref DevicePlantSelectionSqs
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  ControllerRegistrationTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{user_id}/controller-registration-token
            Method: GET
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_controller_registration_token"
      Description: Return a temporary token for the controller to register itself.
      Handler: controller_registration_token.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/controller_registration_token.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          CONTROLLER_REGISTRATION_ROLE: !GetAtt ControllerRegistrationRole.Arn
      Timeout: 30

  ControllerRegistrationTokenAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-controller_registration_token-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref ControllerRegistrationTokenFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  ControllerRegistrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !Ref LambdaRole
            Action: sts:AssumeRole
      Description: A role to grant temporary credentials for a controller registration
      Policies:
        - PolicyName: InvokeRegistrationEndPoint
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/${Environment}/POST/greenhouse/*/register"

  UserGreenhousesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{user_id}/greenhouses
            Method: GET
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_user_greenhouses"
      Description: Get the user registered greenhouses.
      Handler: user_greenhouses.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/user_greenhouses.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  UserGreenhousesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-user-greenhouse-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserGreenhousesFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  UserPostSignInFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /user/{user_id}/post-sign-in
            Method: GET
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_user_post_sign_in"
      Description: Post Sign In Handler for Grower App.
      Handler: grower_post_sign_in.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/grower_post_sign_in.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  UserPostSignInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-user-post-sign-in-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserPostSignInFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  DevicePlantsCatalog:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /device/{device_id}/plants-catalog
            Method: GET
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_device_plants_catalog"
      Description: Get the device plants catalog.
      Handler: device_plants_catalog.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/device_plants_catalog.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  DevicePlantsCatalogAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-device-plants-catalog-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref DevicePlantsCatalog
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  PlantsServiceAdmin:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}_plants_service_admin"
      Description: Plants service admin utility.
      Handler: plants_service_admin.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/plants_service_admin.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  GreenhouseFramesFetcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        LatestDeviceFramesApiEvent:
          Type: Api
          Properties:
            Path: /greenhouse/{controller_id}/frames/latest
            Method: GET
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_greenhouse_frames_fetcher"
      Description: Get the latest device frames.
      Handler: device_frame_fetcher.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/device_frame_fetcher.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  GreenhouseFramesFetcherAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-greenhouse-frames-fetcher-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref GreenhouseFramesFetcherFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns


  DeviceModeToggleFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        ToggleDeviceApiEvent:
          Type: Api
          Properties:
            Path: /device/{device_id}/mode/{mode}
            Method: PUT
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_device_mode_toggle"
      Description: Toggles a device mode to on / off.
      Handler: device_mode_toggle.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/device_mode_toggle.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
      Timeout: 30

  DeviceModeToggleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-device-mode-toggle-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeviceModeToggleFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  OnboardingStageHandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Events:
        UpdateOnboardingStageApiEvent:
          Type: Api
          Properties:
            Path: /user/{user_id}/onboarding-stage
            Method: POST
            RestApiId:
              Ref: AgwaApiGateway
            Auth:
              Authorizer: AgwaApiAuthorizer
      FunctionName: !Sub "${Environment}_onboarding_stage_handler"
      Description: Triggers actions according to user onboarding stage
      Handler: onboarding_stage_handler.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/onboarding_stage_handler.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          SUPPORT_MESSAGE_ASSIGNEE_ID: "5079336"
      Timeout: 30

  OnboardingStageHandlerAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-onboarding-stage-handler-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref OnboardingStageHandlerFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns