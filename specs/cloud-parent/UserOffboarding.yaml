AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: Deploy User Offboarding Resources

Parameters:
  Environment:
    Type: String

  CommonLayer:
    Type: String

  ArtifactsBucket:
    Type: String

  LambdaPrefix:
    Type: String

  LayerPrefix:
    Type: String

  LambdaRole:
    Type: String

  NotificationsSns:
    Type: String

Resources:
  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  UserOffboardingStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      StateMachineName: !Sub "${Environment}_user_offboarding_state_machine"
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "User Offboarding state machine",
              "StartAt": "Initial",
              "States": {
                "Initial": {
                  "Type": "Task",
                  "Resource": "${handlerArn}",
                  "Next": "Mapper",
                  "Retry": [{
                    "ErrorEquals": ["States.TaskFailed"],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 5,
                    "BackoffRate": 1.5
                  }]
                },
                "Mapper": {
                  "Type": "Map",
                  "MaxConcurrency": 10,
                  "End": true,
                  "Retry": [{
                    "ErrorEquals": ["States.TaskFailed"],
                    "IntervalSeconds": 60,
                    "MaxAttempts": 5,
                    "BackoffRate": 1.5
                  }],
                  "Iterator": {
                    "StartAt": "Iteration",
                    "States": {
                      "Iteration": {
                        "Type":"Task",
                        "Resource": "${handlerArn}",
                        "Retry": [{
                            "ErrorEquals": ["States.TaskFailed"],
                            "IntervalSeconds": 60,
                            "MaxAttempts": 5,
                            "BackoffRate": 1.5
                         }],
                        "End": true
                      }
                    } 
                  }
                }
              }
            }
          - {handlerArn: !GetAtt [ UserOffboardingFunction, Arn ]}

  UserOffboardingIngressFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 30
      FunctionName: !Sub "${Environment}_user_offboarding_ingress"
      Description: A lambda handler which initiates user offboarding processes
      Handler: user_offboarding_ingress.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/user_offboarding_ingress.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          APP_STATE_MACHINE: !GetAtt UserOffboardingStateMachine.Arn

  UserOffboardingIngressAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-user-offboarding-ingress-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserOffboardingIngressFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  UserOffboardingEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt UserOffboardingIngressQueue.Arn
      FunctionName: !GetAtt UserOffboardingIngressFunction.Arn

  UserOffboardingIngressQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 120
      QueueName: !Sub "${Environment}-user-offboarding-ingress"
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UserOffboardingIngressDeadLetterQueue.Arn
        maxReceiveCount: 3

  UserOffboardingIngressDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${Environment}-user-offboarding-ingress-dead-letter-queue"

  UserOffboardingIngressQueueUnprocessedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-user-offboarding-queue-unprocessed"
      AlarmDescription: Trigger an alarm if queue contains a lot of unprocessed messages
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: SQS
      Dimensions:
        - Name: QueueName
          Value: !GetAtt UserOffboardingIngressDeadLetterQueue.QueueName
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  UserOffboardingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 30
      FunctionName: !Sub "${Environment}_user_offboarding"
      Description: A lambda handler which handles user offboarding state machine
      Handler: user_offboarding.lambda_handler
      Role: !Ref LambdaRole
      Runtime: python3.8
      CodeUri:
        Bucket: !Ref ArtifactsBucket
        Key: !Sub "${LambdaPrefix}/user_offboarding.zip"
      Layers:
        - !Ref CommonLayer
      Environment:
        Variables:
          ENV: !Ref Environment
          APP_USER_POOL_ID: !Sub '{{resolve:ssm:/infra/${Environment}/auth/cognito/user-pool/id/grower-service}}'
          APP_CONTROLLER_MANAGEMENT_FUNCTION: !Sub '{{resolve:ssm:/infra/${Environment}/functions/controller-management}}'

  UserOffboardingAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-user-offboarding-alarm"
      AlarmDescription: Trigger an alarm if an error is recorded
      MetricName: Errors
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref UserOffboardingFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - !Ref NotificationsSns

  UserOffboardingIngressQueueParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/infra/${Environment}/resources/queues/user-offboarding-ingress"
      Type: String
      Value: !Ref UserOffboardingIngressQueue
      Description: !Sub "User offboarding ingresss queue for the ${Environment} env."