"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseInstance = exports.InstanceType = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const ec2 = require("@aws-cdk/aws-ec2");
const cdk = require("@aws-cdk/core");
const endpoint_1 = require("./endpoint");
const neptune_generated_1 = require("./neptune.generated");
/**
 * (experimental) Possible Instances Types to use in Neptune cluster used for defining {@link DatabaseInstanceProps.instanceType}.
 *
 * @experimental
 */
var InstanceType;
(function (InstanceType) {
    InstanceType["R5_LARGE"] = "db.r5.large";
    InstanceType["R5_XLARGE"] = "db.r5.xlarge";
    InstanceType["R5_2XLARGE"] = "db.r5.2xlarge";
    InstanceType["R5_4XLARGE"] = "db.r5.4xlarge";
    InstanceType["R5_8XLARGE"] = "db.r5.8xlarge";
    InstanceType["R5_12XLARGE"] = "db.r5.12xlarge";
    InstanceType["R5_24XLARGE"] = "db.r5.24xlarge";
    InstanceType["R4_LARGE"] = "db.r4.large";
    InstanceType["R4_XLARGE"] = "db.r4.xlarge";
    InstanceType["R4_2XLARGE"] = "db.r4.2xlarge";
    InstanceType["R4_4XLARGE"] = "db.r4.4xlarge";
    InstanceType["R4_8XLARGE"] = "db.r4.8xlarge";
    InstanceType["T3_MEDIUM"] = "db.t3.medium";
})(InstanceType = exports.InstanceType || (exports.InstanceType = {}));
/**
 * (experimental) A database instance.
 *
 * @experimental
 * @resource AWS::Neptune::DBInstance
 */
class DatabaseInstance extends cdk.Resource {
    /**
     * @experimental
     */
    constructor(scope, id, props) {
        var _b;
        super(scope, id);
        const instance = new neptune_generated_1.CfnDBInstance(this, 'Resource', {
            dbClusterIdentifier: props.cluster.clusterIdentifier,
            dbInstanceClass: props.instanceType,
            availabilityZone: props.availabilityZone,
            dbInstanceIdentifier: props.dbInstanceName,
            dbParameterGroupName: (_b = props.parameterGroup) === null || _b === void 0 ? void 0 : _b.parameterGroupName,
        });
        this.cluster = props.cluster;
        this.instanceIdentifier = instance.ref;
        this.dbInstanceEndpointAddress = instance.attrEndpoint;
        this.dbInstanceEndpointPort = instance.attrPort;
        // create a number token that represents the port of the instance
        const portAttribute = cdk.Token.asNumber(instance.attrPort);
        this.instanceEndpoint = new endpoint_1.Endpoint(instance.attrEndpoint, portAttribute);
        instance.applyRemovalPolicy(props.removalPolicy, {
            applyToUpdateReplacePolicy: true,
        });
    }
    /**
     * (experimental) Import an existing database instance.
     *
     * @experimental
     */
    static fromDatabaseInstanceAttributes(scope, id, attrs) {
        class Import extends cdk.Resource {
            constructor() {
                super(...arguments);
                this.defaultPort = ec2.Port.tcp(attrs.port);
                this.instanceIdentifier = attrs.instanceIdentifier;
                this.dbInstanceEndpointAddress = attrs.instanceEndpointAddress;
                this.dbInstanceEndpointPort = attrs.port.toString();
                this.instanceEndpoint = new endpoint_1.Endpoint(attrs.instanceEndpointAddress, attrs.port);
            }
        }
        return new Import(scope, id);
    }
}
exports.DatabaseInstance = DatabaseInstance;
_a = JSII_RTTI_SYMBOL_1;
DatabaseInstance[_a] = { fqn: "@aws-cdk/aws-neptune.DatabaseInstance", version: "1.94.1" };
//# sourceMappingURL=data:application/json;base64,