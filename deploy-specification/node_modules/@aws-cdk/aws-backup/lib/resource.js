"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BackupResource = exports.TagOperation = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const core_1 = require("@aws-cdk/core");
/**
 * (experimental) An operation that is applied to a key-value pair.
 *
 * @experimental
 */
var TagOperation;
(function (TagOperation) {
    TagOperation["STRING_EQUALS"] = "STRINGEQUALS";
    TagOperation["DUMMY"] = "dummy";
})(TagOperation = exports.TagOperation || (exports.TagOperation = {}));
/**
 * (experimental) A resource to backup.
 *
 * @experimental
 */
class BackupResource {
    /**
     * @experimental
     */
    constructor(resource, tagCondition, construct) {
        this.resource = resource;
        this.tagCondition = tagCondition;
        this.construct = construct;
    }
    /**
     * (experimental) Adds all supported resources in a construct.
     *
     * @param construct The construct containing resources to backup.
     * @experimental
     */
    static fromConstruct(construct) {
        return new BackupResource(undefined, undefined, construct);
    }
    /**
     * (experimental) A DynamoDB table.
     *
     * @experimental
     */
    static fromDynamoDbTable(table) {
        return BackupResource.fromArn(table.tableArn);
    }
    /**
     * (experimental) An EC2 instance.
     *
     * @experimental
     */
    static fromEc2Instance(instance) {
        return BackupResource.fromArn(core_1.Stack.of(instance).formatArn({
            service: 'ec2',
            resource: 'instance',
            resourceName: instance.instanceId,
        }));
    }
    /**
     * (experimental) An EFS file system.
     *
     * @experimental
     */
    static fromEfsFileSystem(fileSystem) {
        return BackupResource.fromArn(core_1.Stack.of(fileSystem).formatArn({
            service: 'elasticfilesystem',
            resource: 'file-system',
            resourceName: fileSystem.fileSystemId,
        }));
    }
    /**
     * (experimental) A RDS database instance.
     *
     * @experimental
     */
    static fromRdsDatabaseInstance(instance) {
        return BackupResource.fromArn(instance.instanceArn);
    }
    /**
     * (experimental) A list of ARNs or match patterns such as `arn:aws:ec2:us-east-1:123456789012:volume/*`.
     *
     * @experimental
     */
    static fromArn(arn) {
        return new BackupResource(arn);
    }
    /**
     * (experimental) A tag condition.
     *
     * @experimental
     */
    static fromTag(key, value, operation) {
        return new BackupResource(undefined, {
            key,
            value,
            operation,
        });
    }
}
exports.BackupResource = BackupResource;
_a = JSII_RTTI_SYMBOL_1;
BackupResource[_a] = { fqn: "@aws-cdk/aws-backup.BackupResource", version: "1.94.1" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJyZXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLHdDQUFzQzs7Ozs7O0FBVXRDLElBQVksWUFVWDtBQVZELFdBQVksWUFBWTtJQUl0Qiw4Q0FBOEIsQ0FBQTtJQUs5QiwrQkFBZSxDQUFBO0FBQ2pCLENBQUMsRUFWVyxZQUFZLEdBQVosb0JBQVksS0FBWixvQkFBWSxRQVV2Qjs7Ozs7O0FBa0NELE1BQWEsY0FBYzs7OztJQWdGekIsWUFBWSxRQUFpQixFQUFFLFlBQTJCLEVBQUUsU0FBcUI7UUFDL0UsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7UUFDakMsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUEwQixDQUFDO0lBQzlDLENBQUM7Ozs7Ozs7SUE5RU0sTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFvQjtRQUM5QyxPQUFPLElBQUksY0FBYyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDN0QsQ0FBQzs7Ozs7O0lBS00sTUFBTSxDQUFDLGlCQUFpQixDQUFDLEtBQXNCO1FBQ3BELE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7O0lBS00sTUFBTSxDQUFDLGVBQWUsQ0FBQyxRQUF1QjtRQUNuRCxPQUFPLGNBQWMsQ0FBQyxPQUFPLENBQUMsWUFBSyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDekQsT0FBTyxFQUFFLEtBQUs7WUFDZCxRQUFRLEVBQUUsVUFBVTtZQUNwQixZQUFZLEVBQUUsUUFBUSxDQUFDLFVBQVU7U0FDbEMsQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDOzs7Ozs7SUFLTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsVUFBMkI7UUFDekQsT0FBTyxjQUFjLENBQUMsT0FBTyxDQUFDLFlBQUssQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQzNELE9BQU8sRUFBRSxtQkFBbUI7WUFDNUIsUUFBUSxFQUFFLGFBQWE7WUFDdkIsWUFBWSxFQUFFLFVBQVUsQ0FBQyxZQUFZO1NBQ3RDLENBQUMsQ0FBQyxDQUFDO0lBQ04sQ0FBQzs7Ozs7O0lBS00sTUFBTSxDQUFDLHVCQUF1QixDQUFDLFFBQStCO1FBQ25FLE9BQU8sY0FBYyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDdEQsQ0FBQzs7Ozs7O0lBTU0sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFXO1FBQy9CLE9BQU8sSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQzs7Ozs7O0lBS00sTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFXLEVBQUUsS0FBYSxFQUFFLFNBQXdCO1FBQ3hFLE9BQU8sSUFBSSxjQUFjLENBQUMsU0FBUyxFQUFFO1lBQ25DLEdBQUc7WUFDSCxLQUFLO1lBQ0wsU0FBUztTQUNWLENBQUMsQ0FBQztJQUNMLENBQUM7O0FBL0RILHdDQXFGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGR5bmFtb2RiIGZyb20gJ0Bhd3MtY2RrL2F3cy1keW5hbW9kYic7XG5pbXBvcnQgKiBhcyBlYzIgZnJvbSAnQGF3cy1jZGsvYXdzLWVjMic7XG5pbXBvcnQgKiBhcyBlZnMgZnJvbSAnQGF3cy1jZGsvYXdzLWVmcyc7XG5pbXBvcnQgKiBhcyByZHMgZnJvbSAnQGF3cy1jZGsvYXdzLXJkcyc7XG5pbXBvcnQgeyBTdGFjayB9IGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSAnY29uc3RydWN0cyc7XG5cbi8vIHYyIC0ga2VlcCB0aGlzIGltcG9ydCBhcyBhIHNlcGFyYXRlIHNlY3Rpb24gdG8gcmVkdWNlIG1lcmdlIGNvbmZsaWN0IHdoZW4gZm9yd2FyZCBtZXJnaW5nIHdpdGggdGhlIHYyIGJyYW5jaC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuaW1wb3J0IHsgQ29uc3RydWN0IGFzIENvcmVDb25zdHJ1Y3QgfSBmcm9tICdAYXdzLWNkay9jb3JlJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbmV4cG9ydCBlbnVtIFRhZ09wZXJhdGlvbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBTVFJJTkdfRVFVQUxTID0gJ1NUUklOR0VRVUFMUycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIERVTU1ZID0gJ2R1bW15J1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFxuZXhwb3J0IGludGVyZmFjZSBUYWdDb25kaXRpb24ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSBrZXk6IHN0cmluZztcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHJlYWRvbmx5IG9wZXJhdGlvbj86IFRhZ09wZXJhdGlvbjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICByZWFkb25seSB2YWx1ZTogc3RyaW5nO1xufVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG5leHBvcnQgY2xhc3MgQmFja3VwUmVzb3VyY2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUNvbnN0cnVjdChjb25zdHJ1Y3Q6IENvbnN0cnVjdCkge1xuICAgIHJldHVybiBuZXcgQmFja3VwUmVzb3VyY2UodW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnN0cnVjdCk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUR5bmFtb0RiVGFibGUodGFibGU6IGR5bmFtb2RiLklUYWJsZSkge1xuICAgIHJldHVybiBCYWNrdXBSZXNvdXJjZS5mcm9tQXJuKHRhYmxlLnRhYmxlQXJuKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGZyb21FYzJJbnN0YW5jZShpbnN0YW5jZTogZWMyLklJbnN0YW5jZSkge1xuICAgIHJldHVybiBCYWNrdXBSZXNvdXJjZS5mcm9tQXJuKFN0YWNrLm9mKGluc3RhbmNlKS5mb3JtYXRBcm4oe1xuICAgICAgc2VydmljZTogJ2VjMicsXG4gICAgICByZXNvdXJjZTogJ2luc3RhbmNlJyxcbiAgICAgIHJlc291cmNlTmFtZTogaW5zdGFuY2UuaW5zdGFuY2VJZCxcbiAgICB9KSk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHN0YXRpYyBmcm9tRWZzRmlsZVN5c3RlbShmaWxlU3lzdGVtOiBlZnMuSUZpbGVTeXN0ZW0pIHtcbiAgICByZXR1cm4gQmFja3VwUmVzb3VyY2UuZnJvbUFybihTdGFjay5vZihmaWxlU3lzdGVtKS5mb3JtYXRBcm4oe1xuICAgICAgc2VydmljZTogJ2VsYXN0aWNmaWxlc3lzdGVtJyxcbiAgICAgIHJlc291cmNlOiAnZmlsZS1zeXN0ZW0nLFxuICAgICAgcmVzb3VyY2VOYW1lOiBmaWxlU3lzdGVtLmZpbGVTeXN0ZW1JZCxcbiAgICB9KSk7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGZyb21SZHNEYXRhYmFzZUluc3RhbmNlKGluc3RhbmNlOiByZHMuSURhdGFiYXNlSW5zdGFuY2UpIHtcbiAgICByZXR1cm4gQmFja3VwUmVzb3VyY2UuZnJvbUFybihpbnN0YW5jZS5pbnN0YW5jZUFybik7XG4gIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyBzdGF0aWMgZnJvbUFybihhcm46IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgQmFja3VwUmVzb3VyY2UoYXJuKTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICBwdWJsaWMgc3RhdGljIGZyb21UYWcoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcsIG9wZXJhdGlvbj86IFRhZ09wZXJhdGlvbikge1xuICAgIHJldHVybiBuZXcgQmFja3VwUmVzb3VyY2UodW5kZWZpbmVkLCB7XG4gICAgICBrZXksXG4gICAgICB2YWx1ZSxcbiAgICAgIG9wZXJhdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlYWRvbmx5IHJlc291cmNlPzogc3RyaW5nO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIHB1YmxpYyByZWFkb25seSB0YWdDb25kaXRpb24/OiBUYWdDb25kaXRpb247XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgcHVibGljIHJlYWRvbmx5IGNvbnN0cnVjdD86IENvcmVDb25zdHJ1Y3Q7XG5cbiAgY29uc3RydWN0b3IocmVzb3VyY2U/OiBzdHJpbmcsIHRhZ0NvbmRpdGlvbj86IFRhZ0NvbmRpdGlvbiwgY29uc3RydWN0PzogQ29uc3RydWN0KSB7XG4gICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgIHRoaXMudGFnQ29uZGl0aW9uID0gdGFnQ29uZGl0aW9uO1xuICAgIHRoaXMuY29uc3RydWN0ID0gY29uc3RydWN0IGFzIENvcmVDb25zdHJ1Y3Q7XG4gIH1cbn1cbiJdfQ==