"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.DAXMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class DAXMetrics {
    static cpuUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'CPUUtilization',
            dimensions,
            statistic: 'Average',
        };
    }
    static itemCacheHitsSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ItemCacheHits',
            dimensions,
            statistic: 'Sum',
        };
    }
    static itemCacheMissesSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ItemCacheMisses',
            dimensions,
            statistic: 'Sum',
        };
    }
    static batchGetItemRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'BatchGetItemRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static batchWriteItemRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'BatchWriteItemRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static cacheMemoryUtilizationAverage(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'CacheMemoryUtilization',
            dimensions,
            statistic: 'Average',
        };
    }
    static clientConnectionsSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ClientConnections',
            dimensions,
            statistic: 'Sum',
        };
    }
    static deleteItemRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'DeleteItemRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static errorRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ErrorRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static estimatedDbSizeAverage(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'EstimatedDbSize',
            dimensions,
            statistic: 'Average',
        };
    }
    static evictedSizeSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'EvictedSize',
            dimensions,
            statistic: 'Sum',
        };
    }
    static failedRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'FailedRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static faultRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'FaultRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static getItemRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'GetItemRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static networkBytesInSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'NetworkBytesIn',
            dimensions,
            statistic: 'Sum',
        };
    }
    static networkBytesOutSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'NetworkBytesOut',
            dimensions,
            statistic: 'Sum',
        };
    }
    static networkPacketsInSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'NetworkPacketsIn',
            dimensions,
            statistic: 'Sum',
        };
    }
    static networkPacketsOutSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'NetworkPacketsOut',
            dimensions,
            statistic: 'Sum',
        };
    }
    static putItemRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'PutItemRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static queryCacheHitsSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'QueryCacheHits',
            dimensions,
            statistic: 'Sum',
        };
    }
    static queryCacheMissesSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'QueryCacheMisses',
            dimensions,
            statistic: 'Sum',
        };
    }
    static queryRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'QueryRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static scanCacheHitsSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ScanCacheHits',
            dimensions,
            statistic: 'Sum',
        };
    }
    static scanCacheMissesSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ScanCacheMisses',
            dimensions,
            statistic: 'Sum',
        };
    }
    static scanRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ScanRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static throttledRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'ThrottledRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static totalRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'TotalRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static transactGetItemsCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'TransactGetItemsCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static transactWriteItemsCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'TransactWriteItemsCount',
            dimensions,
            statistic: 'Sum',
        };
    }
    static updateItemRequestCountSum(dimensions) {
        return {
            namespace: 'AWS/DAX',
            metricName: 'UpdateItemRequestCount',
            dimensions,
            statistic: 'Sum',
        };
    }
}
exports.DAXMetrics = DAXMetrics;
//# sourceMappingURL=data:application/json;base64,