"use strict";
// Copyright 2012-2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpsWorksMetrics = void 0;
/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control
class OpsWorksMetrics {
    static procsAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'procs',
            dimensions,
            statistic: 'Average',
        };
    }
    static memoryUsedAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'memory_used',
            dimensions,
            statistic: 'Average',
        };
    }
    static cpuIdleAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'cpu_idle',
            dimensions,
            statistic: 'Average',
        };
    }
    static cpuNiceAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'cpu_nice',
            dimensions,
            statistic: 'Average',
        };
    }
    static cpuStealAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'cpu_steal',
            dimensions,
            statistic: 'Average',
        };
    }
    static cpuSystemAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'cpu_system',
            dimensions,
            statistic: 'Average',
        };
    }
    static cpuUserAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'cpu_user',
            dimensions,
            statistic: 'Average',
        };
    }
    static cpuWaitioAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'cpu_waitio',
            dimensions,
            statistic: 'Average',
        };
    }
    static load1Average(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'load_1',
            dimensions,
            statistic: 'Average',
        };
    }
    static load15Average(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'load_15',
            dimensions,
            statistic: 'Average',
        };
    }
    static load5Average(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'load_5',
            dimensions,
            statistic: 'Average',
        };
    }
    static memoryBuffersAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'memory_buffers',
            dimensions,
            statistic: 'Average',
        };
    }
    static memoryCachedAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'memory_cached',
            dimensions,
            statistic: 'Average',
        };
    }
    static memoryFreeAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'memory_free',
            dimensions,
            statistic: 'Average',
        };
    }
    static memorySwapAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'memory_swap',
            dimensions,
            statistic: 'Average',
        };
    }
    static memoryTotalAverage(dimensions) {
        return {
            namespace: 'AWS/OpsWorks',
            metricName: 'memory_total',
            dimensions,
            statistic: 'Average',
        };
    }
}
exports.OpsWorksMetrics = OpsWorksMetrics;
//# sourceMappingURL=data:application/json;base64,